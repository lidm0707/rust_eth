{
    "sourceFile": "src/op_gas_eip1599.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 76,
            "patches": [
                {
                    "date": 1732979361959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732979367008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+\r\n+use ethers::providers::{Http, Middleware, Provider};\r\n+use eyre::Result;\r\n+\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    let gas_price = provider.get_gas_price().await?;\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+\r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n+    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n+\r\n+\r\n+\r\n+    Ok(())\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732979408891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,95 +9,12 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n \r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n \r\n-\r\n-\r\n     Ok(())\r\n }\r\n \r\n \r\n-\r\n-use ethers::providers::{Http, Middleware, Provider};\r\n-use eyre::Result;\r\n-\r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n-\r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-\r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n-\r\n-\r\n-\r\n-    Ok(())\r\n-}\r\n-\r\n-\r\n-// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n-//     let wei_per_eth: u128 = 10u128.pow(18);\r\n-//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n-//     U256::from(wei_amount)\r\n-// }\r\n-\r\n-\r\n-// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-// async fn fetch_eth_price() -> Result<f64> {\r\n-//     // ส่งคำขอไปที่ CoinGecko API\r\n-//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-//     let price_data: serde_json::Value = response.json().await?;\r\n-\r\n-//     println!(\"check get {:?}\", price_data);\r\n-\r\n-//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n-//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-//         .as_f64()\r\n-//         .expect(\"Failed to fetch ETH price\");\r\n-\r\n-//     Ok(eth_price)\r\n-// }\r\n-\r\n-// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-//     // กำหนดค่า Gas Limit มาตรฐาน\r\n-//     let standard_gas_limit = 21_000;\r\n-\r\n-//     // แปลง Gas Cost จาก Wei -> ETH:\r\n-//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-//     let gas_cost_eth =\r\n-//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-//     // คำนวณต้นทุนก๊าซใน USD:\r\n-//     // gas_cost_usd = gas_cost_eth * eth_price\r\n-//     gas_cost_eth * eth_price\r\n-// }\r\n"
                },
                {
                    "date": 1732979415943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n+    let \r\n \r\n \r\n \r\n-\r\n     Ok(())\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1732979423845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let \r\n+    let eip1599\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979429915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599\r\n+    let eip1599_transact = pr\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979436225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = pr\r\n+    let eip1599_transact = Tra\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979441951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::providers::{Http, Middleware, Provider};\r\n+use ethers::{providers::{Http, Middleware, Provider}, types::Transaction};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = Tra\r\n+    let eip1599_transact = Transaction\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979466198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::{providers::{Http, Middleware, Provider}, types::Transaction};\r\n+use ethers::{providers::{Http, Middleware, Provider}, types::};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = Transaction\r\n+    let eip1599_transact = \r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979472579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::{providers::{Http, Middleware, Provider}, types::};\r\n+use ethers::{providers::{Http, Middleware, Provider}};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = \r\n+    let eip1599_transact = tra\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979479585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = tra\r\n+    let eip1599_transact = Transact\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979484738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = Transact\r\n+    let eip1599_transact = TransactionT\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979493387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact = TransactionT\r\n+    let eip1599_transact \r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979499668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let eip1599_transact \r\n+    // let eip1599_transact \r\n+    provider.\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979505723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // let eip1599_transact \r\n-    provider.\r\n+    provider.estimate_eip1559_fees(estimator)\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979587091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // let eip1599_transact \r\n-    provider.estimate_eip1559_fees(estimator)\r\n+    provider.estimate_eip1559_fees(estimator);\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979626924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // let eip1599_transact \r\n-    provider.estimate_eip1559_fees(estimator);\r\n+    provider.es;\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979635633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // let eip1599_transact \r\n-    provider.es;\r\n+    provider.estimate_gas(tx, None);\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979643636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // let eip1599_transact \r\n-    provider.estimate_gas(tx, None);\r\n+    provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979649927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+\r\n+use ethers::{providers::{Http, Middleware, Provider}};\r\n+use eyre::Result;\r\n+\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    let tx1599\r\n+    provider.estimate_gas(&tx1599, None);\r\n+\r\n+\r\n+\r\n+    Ok(())\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732979659682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,34 +9,13 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let tx1599\r\n+    let tx1599 = TypedTransaction\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n     Ok(())\r\n }\r\n \r\n \r\n-\r\n-use ethers::{providers::{Http, Middleware, Provider}};\r\n-use eyre::Result;\r\n-\r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // let eip1599_transact \r\n-    provider.estimate_gas(&tx1599, None);\r\n-\r\n-\r\n-\r\n-    Ok(())\r\n-}\r\n-\r\n-\r\n"
                },
                {
                    "date": 1732979665886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::{providers::{Http, Middleware, Provider}};\r\n+use ethers::{providers::{Http, Middleware, Provider}, types::transaction::eip2718::TypedTransaction};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let tx1599 = TypedTransaction\r\n+    let tx1599 = TypedTransaction::\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979672738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let tx1599 = TypedTransaction::\r\n+    let tx1599 = TypedTransaction::Eip1559()\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979683103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let tx1599 = TypedTransaction::Eip1559()\r\n+    let tx1599 = TypedTransaction::Eip1559()::new;\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979692466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    let tx1599 = TypedTransaction::Eip1559()::new;\r\n+    let tx1599 = TypedTransaction::Eip1559();\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979716612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n+    \r\n     let tx1599 = TypedTransaction::Eip1559();\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n"
                },
                {
                    "date": 1732979722662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-    \r\n+    let tx = Eip1559TransactionRequest;\r\n     let tx1599 = TypedTransaction::Eip1559();\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n"
                },
                {
                    "date": 1732979729774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::{providers::{Http, Middleware, Provider}, types::transaction::eip2718::TypedTransaction};\r\n+use ethers::{providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -8,9 +8,9 @@\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-    let tx = Eip1559TransactionRequest;\r\n+    let tx = Eip1559TransactionRequest::new();\r\n     let tx1599 = TypedTransaction::Eip1559();\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n"
                },
                {
                    "date": 1732979783679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,15 @@\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-    let tx = Eip1559TransactionRequest::new();\r\n+    let tx = Eip1559TransactionRequest::new()\r\n+    .from(from) // Address ที่ส่ง\r\n+    .to(to) // Address ที่รับ\r\n+    .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n+    .gas(U256::from(21_000)) // Gas limit\r\n+    .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n+    .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n     let tx1599 = TypedTransaction::Eip1559();\r\n     provider.estimate_gas(&tx1599, None);\r\n \r\n \r\n"
                },
                {
                    "date": 1732979834063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(from) // Address ที่ส่ง\r\n+    .from(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\") // Address ที่ส่ง\r\n     .to(to) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n"
                },
                {
                    "date": 1732979840476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n     .from(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\") // Address ที่ส่ง\r\n-    .to(to) // Address ที่รับ\r\n+    .to(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\") // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n     .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n"
                },
                {
                    "date": 1732979865045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\") // Address ที่ส่ง\r\n+    .from(Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\") // Address ที่ส่ง\r\n     .to(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\") // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n"
                },
                {
                    "date": 1732979870834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\") // Address ที่ส่ง\r\n-    .to(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\") // Address ที่รับ\r\n+    .from(Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n+    .to(Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\") // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n     .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n"
                },
                {
                    "date": 1732979879676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-use ethers::{providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n+use ethers::{abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n     .from(Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n-    .to(Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\") // Address ที่รับ\r\n+    .to(Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n     .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n"
                },
                {
                    "date": 1732979889982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \r\n use ethers::{abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n use eyre::Result;\r\n+use std::\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n"
                },
                {
                    "date": 1732979895300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \r\n use ethers::{abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n use eyre::Result;\r\n-use std::\r\n+use std::str::from\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n"
                },
                {
                    "date": 1732979902143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \r\n use ethers::{abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n use eyre::Result;\r\n-use std::str::from\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n"
                },
                {
                    "date": 1732979921421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n+    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n     .to(Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n"
                },
                {
                    "date": 1732979927201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n     .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n-    .to(Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n+    .to(Address(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n     .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n"
                },
                {
                    "date": 1732979951247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")) // Address ที่ส่ง\r\n+    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to)) // Address ที่ส่ง\r\n     .to(Address(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n"
                },
                {
                    "date": 1732979959916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n     let tx = Eip1559TransactionRequest::new()\r\n-    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to)) // Address ที่ส่ง\r\n-    .to(Address(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")) // Address ที่รับ\r\n+    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to_string())) // Address ที่ส่ง\r\n+    .to(Address(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\".to_string())) // Address ที่รับ\r\n     .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n     .gas(U256::from(21_000)) // Gas limit\r\n     .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n     .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n"
                },
                {
                    "date": 1732979972049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+use ethers::{\r\n+    abi::Address,\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest},\r\n+};\r\n+use eyre::Result;\r\n+\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+    let tx = Eip1559TransactionRequest::new()\r\n+        .from(Address(\r\n+            \"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to_string(),\r\n+        )) // Address ที่ส่ง\r\n+        .to(Address(\r\n+            \"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\".to_string(),\r\n+        )) // Address ที่รับ\r\n+        .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n+        .gas(U256::from(21_000)) // Gas limit\r\n+        .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n+        .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n+    let tx1599 = TypedTransaction::Eip1559();\r\n+    provider.estimate_gas(&tx1599, None);\r\n+\r\n+    Ok(())\r\n+}\r\n"
                },
                {
                    "date": 1732980003847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,37 @@\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n-    types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest},\r\n+    types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, U256},\r\n };\r\n use eyre::Result;\r\n+use std::str::FromStr;\r\n \r\n-// RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // สร้าง Address จาก String\r\n+    let from = Address::from_str(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\")?;\r\n+    let to = Address::from_str(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\")?;\r\n+\r\n+    // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n-        .from(Address(\r\n-            \"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to_string(),\r\n-        )) // Address ที่ส่ง\r\n-        .to(Address(\r\n-            \"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\".to_string(),\r\n-        )) // Address ที่รับ\r\n+        .from(from) // Address ที่ส่ง\r\n+        .to(to) // Address ที่รับ\r\n         .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n-        .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n-    let tx1599 = TypedTransaction::Eip1559();\r\n-    provider.estimate_gas(&tx1599, None);\r\n+        .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n-    Ok(())\r\n-}\r\n+    // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n+    let tx_typed: TypedTransaction = tx.into();\r\n \r\n-use ethers::{abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest}};\r\n-use eyre::Result;\r\n+    // คำนวณ Gas ที่ต้องใช้\r\n+    let gas_estimate = provider.estimate_gas(&tx_typed, None).await?;\r\n+    println!(\"Estimated Gas: {}\", gas_estimate);\r\n \r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-    let tx = Eip1559TransactionRequest::new()\r\n-    .from(Address(\"0x8A1B3C4D5E6F70890123456789ABCDEF01234567\".to_string())) // Address ที่ส่ง\r\n-    .to(Address(\"0x9B2C4D5E6F7A8090123456789ABCDEFF12345678\".to_string())) // Address ที่รับ\r\n-    .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n-    .gas(U256::from(21_000)) // Gas limit\r\n-    .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n-    .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei);\r\n-    let tx1599 = TypedTransaction::Eip1559();\r\n-    provider.estimate_gas(&tx1599, None);\r\n-\r\n-\r\n-\r\n     Ok(())\r\n }\r\n-\r\n-\r\n"
                },
                {
                    "date": 1732980111691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,4 +34,11 @@\n     println!(\"Estimated Gas: {}\", gas_estimate);\r\n \r\n     Ok(())\r\n }\r\n+\r\n+fn eth_to_wei(eth: f64) -> U256 {\r\n+    // 1 ETH = 10^18 Wei\r\n+    let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n+    let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n+    U256::from(wei_amount)\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980120606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(U256::from(1_000_000_000_000_000_000u64)) // ค่า ETH (1 ETH)\r\n+        .value(U256::from(eth_to_wei)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n"
                },
                {
                    "date": 1732980133703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(U256::from(eth_to_wei)) // ค่า ETH (1 ETH)\r\n+        .value(U256::from(eth_to_wei(1))) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n@@ -39,6 +39,6 @@\n fn eth_to_wei(eth: f64) -> U256 {\r\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amount)\r\n+    U256::from(wei_amount) as f64\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980152978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,6 @@\n fn eth_to_wei(eth: f64) -> U256 {\r\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amount) as f64\r\n+    U256::from(wei_amount)\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980166237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(U256::from(eth_to_wei(1))) // ค่า ETH (1 ETH)\r\n+        .value(eth_to_wei(1))) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n"
                },
                {
                    "date": 1732980176622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(eth_to_wei(1))) // ค่า ETH (1 ETH)\r\n+        .value(eth_to_wei(1)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n@@ -39,6 +39,6 @@\n fn eth_to_wei(eth: f64) -> U256 {\r\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amount)\r\n+    U256::from(wei_amountu64)\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980182980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,6 @@\n fn eth_to_wei(eth: f64) -> U256 {\r\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amountu64)\r\n+    U256::from(wei_amount) as \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980190685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,6 @@\n fn eth_to_wei(eth: f64) -> U256 {\r\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amount) as \r\n+    U256::from(wei_amount)\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980201533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(eth_to_wei(1)) // ค่า ETH (1 ETH)\r\n+        .value(eth_to_wei(1u64)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n"
                },
                {
                    "date": 1732980211157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // ตั้งค่าการทำธุรกรรม EIP-1559\r\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n-        .value(eth_to_wei(1u64)) // ค่า ETH (1 ETH)\r\n+        .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n"
                },
                {
                    "date": 1732980287279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,5 +40,10 @@\n     // 1 ETH = 10^18 Wei\r\n     let wei_per_eth = 1_000_000_000_000_000_000u128;\r\n     let wei_amount = (eth * wei_per_eth as f64) as u128;\r\n     U256::from(wei_amount)\r\n+}\r\n+\r\n+fn gwei_to_wei(gwei: u64) -> U256 {\r\n+    let wei_per_gwei = 1_000_000_000u64; // 1 GWei = 10^9 Wei\r\n+    U256::from(gwei) * U256::from(wei_per_gwei)\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732980294450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n-        .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // Max priority fee (2 GWei)\r\n+        .max_priority_fee_per_gas(gwei_to_wei) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n"
                },
                {
                    "date": 1732980300686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n-        .max_priority_fee_per_gas(gwei_to_wei) // Max priority fee (2 GWei)\r\n-        .max_fee_per_gas(U256::from(50_000_000_000u64)); // Max fee per gas (50 GWei)\r\n+        .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n+        .max_fee_per_gas(gwei_to_wei); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n"
                },
                {
                    "date": 1732980305821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n         .gas(U256::from(21_000)) // Gas limit\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n-        .max_fee_per_gas(gwei_to_wei); // Max fee per gas (50 GWei)\r\n+        .max_fee_per_gas(gwei_to_wei(5)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n"
                },
                {
                    "date": 1732980381822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,11 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(U256::from(21_000)) // Gas limit\r\n+        .gas(U256::from(21_000)) // Gas limit \r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n-        .max_fee_per_gas(gwei_to_wei(5)); // Max fee per gas (50 GWei)\r\n+        .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n"
                },
                {
                    "date": 1732980387484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(U256::from(21_000)) // Gas limit \r\n+        .gas(U256::from(21_000)) // Gas limit complex bas \r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980393250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(U256::from(21_000)) // Gas limit complex bas \r\n+        .gas(U256::from(21_000)) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980570261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n     let gas_estimate = provider.estimate_gas(&tx_typed, None).await?;\r\n-    println!(\"Estimated Gas: {}\", gas_estimate);\r\n \r\n+\r\n     Ok(())\r\n }\r\n \r\n fn eth_to_wei(eth: f64) -> U256 {\r\n"
                },
                {
                    "date": 1732980575554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n-    let gas_estimate = provider.estimate_gas(&tx_typed, None).await?;\r\n+    maprovider.estimate_gas(&tx_typed, None).await?;\r\n \r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980581399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,11 @@\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n-    maprovider.estimate_gas(&tx_typed, None).await?;\r\n+    match   {\r\n+        \r\n+    }provider.estimate_gas(&tx_typed, None).await;\r\n \r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980587911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,13 +29,12 @@\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n-    match   {\r\n+    match provider.estimate_gas(&tx_typed, None).await {\r\n         \r\n-    }provider.estimate_gas(&tx_typed, None).await;\r\n+    };\r\n \r\n-\r\n     Ok(())\r\n }\r\n \r\n fn eth_to_wei(eth: f64) -> U256 {\r\n@@ -47,5 +46,5 @@\n \r\n fn gwei_to_wei(gwei: u64) -> U256 {\r\n     let wei_per_gwei = 1_000_000_000u64; // 1 GWei = 10^9 Wei\r\n     U256::from(gwei) * U256::from(wei_per_gwei)\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1732980598142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n-    match provider.estimate_gas(&tx_typed, None).await {\r\n-        \r\n+    match provider.estimate_gas(&tx_typed, None).await.unwrap() {\r\n+\r\n     };\r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980620112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n     match provider.estimate_gas(&tx_typed, None).await.unwrap() {\r\n-\r\n+        Ok\r\n     };\r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980626542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n     match provider.estimate_gas(&tx_typed, None).await.unwrap() {\r\n-        Ok\r\n+        Ok()\r\n+        Err()\r\n     };\r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980641937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,19 @@\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n     let tx_typed: TypedTransaction = tx.into();\r\n \r\n     // คำนวณ Gas ที่ต้องใช้\r\n-    match provider.estimate_gas(&tx_typed, None).await.unwrap() {\r\n-        Ok()\r\n-        Err()\r\n-    };\r\n+    match provider.estimate_gas(&tx_typed, None).await {\r\n+        Ok(gas_estimate) => {\r\n+            // การประเมิน gas สำเร็จ\r\n+            println!(\"Estimated Gas: {}\", gas_estimate);\r\n+        }\r\n+        Err(error) => {\r\n+            // การประเมิน gas ล้มเหลว\r\n+            eprintln!(\"Failed to estimate gas: {}\", error);\r\n+        }\r\n+    }\r\n+    \r\n \r\n     Ok(())\r\n }\r\n \r\n"
                },
                {
                    "date": 1732980648612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         Err(error) => {\r\n             // การประเมิน gas ล้มเหลว\r\n             eprintln!(\"Failed to estimate gas: {}\", error);\r\n         }\r\n-    }\r\n+    };\r\n     \r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732980885811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(U256::from(21_000)) // Gas limit complex bas is not wei and eth\r\n+        .gas(U256::from()) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980891801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(U256::from()) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980897950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000 ) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980911592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000 ) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000 as U256) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980922474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000 as U256) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980929068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000u64) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732980972606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000u64) // Gas limit complex bas is not wei and eth\r\n+        .gas(21_000 as u64) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                },
                {
                    "date": 1732981009029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let tx = Eip1559TransactionRequest::new()\r\n         .from(from) // Address ที่ส่ง\r\n         .to(to) // Address ที่รับ\r\n         .value(eth_to_wei(1.00)) // ค่า ETH (1 ETH)\r\n-        .gas(21_000 as u64) // Gas limit complex bas is not wei and eth\r\n+        .gas(U256::from()) // Gas limit complex bas is not wei and eth\r\n         .max_priority_fee_per_gas(gwei_to_wei(2)) // Max priority fee (2 GWei)\r\n         .max_fee_per_gas(gwei_to_wei(50)); // Max fee per gas (50 GWei)\r\n \r\n     // แปลง EIP-1559 Transaction เป็น TypedTransaction\r\n"
                }
            ],
            "date": 1732979361959,
            "name": "Commit-0",
            "content": "\r\nuse ethers::providers::{Http, Middleware, Provider};\r\nuse eyre::Result;\r\n\r\n// RPC และ API URL\r\nconst OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n\r\n    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n    let gas_price = provider.get_gas_price().await?;\r\n    println!(\"Gas Price (Wei): {}\", gas_price);\r\n\r\n    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n\r\n\r\n    // แสดงผลลัพธ์\r\n    println!(\"Optimism Network Gas Prices:\");\r\n    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n\r\n\r\n\r\n    Ok(())\r\n}\r\n\r\n\r\n// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n//     let wei_per_eth: u128 = 10u128.pow(18);\r\n//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n//     U256::from(wei_amount)\r\n// }\r\n\r\n\r\n// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n// async fn fetch_eth_price() -> Result<f64> {\r\n//     // ส่งคำขอไปที่ CoinGecko API\r\n//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n//     let price_data: serde_json::Value = response.json().await?;\r\n\r\n//     println!(\"check get {:?}\", price_data);\r\n\r\n//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n//         .as_f64()\r\n//         .expect(\"Failed to fetch ETH price\");\r\n\r\n//     Ok(eth_price)\r\n// }\r\n\r\n// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n//     // กำหนดค่า Gas Limit มาตรฐาน\r\n//     let standard_gas_limit = 21_000;\r\n\r\n//     // แปลง Gas Cost จาก Wei -> ETH:\r\n//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n//     let gas_cost_eth =\r\n//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n\r\n//     // คำนวณต้นทุนก๊าซใน USD:\r\n//     // gas_cost_usd = gas_cost_eth * eth_price\r\n//     gas_cost_eth * eth_price\r\n// }\r\n"
        }
    ]
}