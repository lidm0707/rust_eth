{
    "sourceFile": "src/contract/ERC20.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1733292081604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733292093004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292150694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    con\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292158520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor(){\r\n+        \r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292166864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20() {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292173424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\") {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292179923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\") {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292189470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    \r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292196784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    deposit\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292204648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit()\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292212580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit() public\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292219188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit() public payable{\r\n+        require(condition);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292224326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit() public payable{\r\n+        require(ms);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292230125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit() public payable{\r\n+        require(msg.value > 0 );\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292237591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,7 +158,7 @@\n \r\n     }\r\n \r\n     function deposit() public payable{\r\n-        require(msg.value > 0 , \"\");\r\n+        require(msg.value > 0 , \"amount is zero\");\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292243732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.28;\r\n+\r\n+abstract contract IERC20 {\r\n+    // Events ตามมาตรฐาน ERC-20\r\n+    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n+    event Approval(\r\n+        address indexed _owner,\r\n+        address indexed _spender,\r\n+        uint256 _value\r\n+    );\r\n+\r\n+    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n+    function name() external view virtual returns (string memory);\r\n+    function symbol() external view virtual returns (string memory);\r\n+    function decimals() external view virtual returns (uint8);\r\n+    function totalSupply() external view virtual returns (uint256);\r\n+    function balanceOf(address account) external view virtual returns (uint256);\r\n+\r\n+    function transfer(\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function transferFrom(\r\n+        address sender,\r\n+        address recipient,\r\n+        uint256 amount\r\n+    ) public virtual returns (bool);\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view virtual returns (uint256);\r\n+}\r\n+\r\n+abstract contract ERC20 is IERC20 {\r\n+    string _name;\r\n+    string _symbol;\r\n+    uint256 _totalSupply;\r\n+    mapping(address => uint256) _balance;\r\n+    mapping(address => mapping(address => uint256)) _allowances;\r\n+\r\n+    constructor(string memory name_, string memory symbol_) {\r\n+        _name = name_;\r\n+        _symbol = symbol_;\r\n+    }\r\n+\r\n+    function name() public view override returns (string memory) {\r\n+        return _name;\r\n+    }\r\n+\r\n+    function symbol() public view override returns (string memory) {\r\n+        return _symbol;\r\n+    }\r\n+    function decimals() public pure override returns (uint8) {\r\n+        return 18;\r\n+    }\r\n+    function totalSupply() public view override returns (uint256) {\r\n+        return _totalSupply;\r\n+    }\r\n+    function balanceOf(address owner) public view override returns (uint256) {\r\n+        return _balance[owner];\r\n+    }\r\n+\r\n+    function transfer(\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _transfer(msg.sender, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    // == private function == //\r\n+    function _transfer(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(from != address(0), \"tranfer from zero address\");\r\n+        require(to != address(0), \"tranfer to zero address\");\r\n+        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n+        _balance[from] -= amount;\r\n+        _balance[to] -= amount;\r\n+\r\n+        emit Transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+    function approve(\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        _approve(msg.sender, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _approve(\r\n+        address owner,\r\n+        address spender,\r\n+        uint256 amount\r\n+    ) internal returns (bool) {\r\n+        require(owner != address(0), \"approve from zero address\");\r\n+        require(spender != address(0), \"approve spender zero address\");\r\n+        _allowances[owner][spender] = amount;\r\n+        emit Approval(owner, spender, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function allowance(\r\n+        address owner,\r\n+        address spender\r\n+    ) public view override returns (uint256) {\r\n+        return _allowances[owner][spender];\r\n+    }\r\n+\r\n+    function transferFrom(\r\n+        address from,\r\n+        address to,\r\n+        uint256 amount\r\n+    ) public override returns (bool) {\r\n+        if (from != msg.sender) {\r\n+            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n+            require(\r\n+                amount <= allowanceAmount,\r\n+                \"transfer amount exceeds allowance\"\r\n+            );\r\n+            _approve(from, msg.sender, allowanceAmount - amount);\r\n+        }\r\n+        _transfer(from, to, amount);\r\n+        return true;\r\n+    }\r\n+\r\n+    function _mint(address to, uint256 amount) internal {\r\n+        require(to != address(0), \"mint to zero address\");\r\n+        _balance[to] += amount;\r\n+        _totalSupply += amount;\r\n+\r\n+        emit Transfer(address(0), to, amount);\r\n+    }\r\n+\r\n+    function _burn(address from, uint256 amount) internal {\r\n+        require(from != address(0), \"burn zero address\");\r\n+        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n+\r\n+        _balance[from] -= amount;\r\n+        _totalSupply -= amount;\r\n+        emit Transfer(from, address(0), amount);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// use contract nameCOIN is ERC20{}\r\n+\r\n+contract MooCoin is ERC20 {\r\n+    constructor() ERC20(\"MooCoin\",\"moo\") {\r\n+\r\n+    }\r\n+\r\n+    function deposit() public payable{\r\n+        require(msg.value > 0 , \"amount is zero\");\r\n+        _mint()\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733292081604,
            "name": "Commit-0",
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nabstract contract IERC20 {\r\n    // Events ตามมาตรฐาน ERC-20\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    // ฟังก์ชัน ERC-20 มาตรฐาน\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n    function decimals() external view virtual returns (uint8);\r\n    function totalSupply() external view virtual returns (uint256);\r\n    function balanceOf(address account) external view virtual returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool);\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual returns (uint256);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n    string _name;\r\n    string _symbol;\r\n    uint256 _totalSupply;\r\n    mapping(address => uint256) _balance;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        return _balance[owner];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // == private function == //\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(from != address(0), \"tranfer from zero address\");\r\n        require(to != address(0), \"tranfer to zero address\");\r\n        require(amount <= _balance[from], \"tranfer amount exceed balance\");\r\n        _balance[from] -= amount;\r\n        _balance[to] -= amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(owner != address(0), \"approve from zero address\");\r\n        require(spender != address(0), \"approve spender zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (from != msg.sender) {\r\n            uint256 allowanceAmount = _allowances[from][msg.sender];\r\n            require(\r\n                amount <= allowanceAmount,\r\n                \"transfer amount exceeds allowance\"\r\n            );\r\n            _approve(from, msg.sender, allowanceAmount - amount);\r\n        }\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        require(to != address(0), \"mint to zero address\");\r\n        _balance[to] += amount;\r\n        _totalSupply += amount;\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        require(from != address(0), \"burn zero address\");\r\n        require(amount <= _balance[from],\"burn amount exceeds balance\");\r\n\r\n        _balance[from] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n// use contract nameCOIN is ERC20{}\r\n\r\nco"
        }
    ]
}