{
    "sourceFile": "src/contract/pool.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1733405658439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733405667633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.0;\r\n+\r\n+\r\n+contract LiquidityPool {\r\n+    IERC20 public tokenA;\r\n+    IERC20 public tokenB;\r\n+    mapping(address => uint256) public liquidity;\r\n+\r\n+    uint256 public reserveA;\r\n+    uint256 public reserveB;\r\n+\r\n+    constructor(address _tokenA, address _tokenB) {\r\n+        tokenA = IERC20(_tokenA);\r\n+        tokenB = IERC20(_tokenB);\r\n+    }\r\n+\r\n+    function addLiquidity(uint256 amountA, uint256 amountB) public {\r\n+        require(tokenA.transferFrom(msg.sender, address(this), amountA), \"Token A transfer failed\");\r\n+        require(tokenB.transferFrom(msg.sender, address(this), amountB), \"Token B transfer failed\");\r\n+\r\n+        reserveA += amountA;\r\n+        reserveB += amountB;\r\n+        liquidity[msg.sender] += (amountA + amountB);\r\n+    }\r\n+\r\n+    function removeLiquidity(uint256 shares) public {\r\n+        uint256 amountA = (shares * reserveA) / totalLiquidity();\r\n+        uint256 amountB = (shares * reserveB) / totalLiquidity();\r\n+\r\n+        require(tokenA.transfer(msg.sender, amountA), \"Token A transfer failed\");\r\n+        require(tokenB.transfer(msg.sender, amountB), \"Token B transfer failed\");\r\n+\r\n+        reserveA -= amountA;\r\n+        reserveB -= amountB;\r\n+        liquidity[msg.sender] -= shares;\r\n+    }\r\n+\r\n+    function totalLiquidity() public view returns (uint256) {\r\n+        return reserveA + reserveB;\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1733405675054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.0;\r\n+\r\n+import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n+\r\n+contract LiquidityPool {\r\n+    IERC20 public tokenA;\r\n+    IERC20 public tokenB;\r\n+    mapping(address => uint256) public liquidity;\r\n+\r\n+    uint256 public reserveA;\r\n+    uint256 public reserveB;\r\n+\r\n+    constructor(address _tokenA, address _tokenB) {\r\n+        tokenA = IERC20(_tokenA);\r\n+        tokenB = IERC20(_tokenB);\r\n+    }\r\n+\r\n+    function addLiquidity(uint256 amountA, uint256 amountB) public {\r\n+        require(tokenA.transferFrom(msg.sender, address(this), amountA), \"Token A transfer failed\");\r\n+        require(tokenB.transferFrom(msg.sender, address(this), amountB), \"Token B transfer failed\");\r\n+\r\n+        reserveA += amountA;\r\n+        reserveB += amountB;\r\n+        liquidity[msg.sender] += (amountA + amountB);\r\n+    }\r\n+\r\n+    function removeLiquidity(uint256 shares) public {\r\n+        uint256 amountA = (shares * reserveA) / totalLiquidity();\r\n+        uint256 amountB = (shares * reserveB) / totalLiquidity();\r\n+\r\n+        require(tokenA.transfer(msg.sender, amountA), \"Token A transfer failed\");\r\n+        require(tokenB.transfer(msg.sender, amountB), \"Token B transfer failed\");\r\n+\r\n+        reserveA -= amountA;\r\n+        reserveB -= amountB;\r\n+        liquidity[msg.sender] -= shares;\r\n+    }\r\n+\r\n+    function totalLiquidity() public view returns (uint256) {\r\n+        return reserveA + reserveB;\r\n+    }\r\n+}\r\n"
                }
            ],
            "date": 1733405658439,
            "name": "Commit-0",
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract LiquidityPool {\r\n    IERC20 public tokenA;\r\n    IERC20 public tokenB;\r\n    mapping(address => uint256) public liquidity;\r\n\r\n    uint256 public reserveA;\r\n    uint256 public reserveB;\r\n\r\n    constructor(address _tokenA, address _tokenB) {\r\n        tokenA = IERC20(_tokenA);\r\n        tokenB = IERC20(_tokenB);\r\n    }\r\n\r\n    function addLiquidity(uint256 amountA, uint256 amountB) public {\r\n        require(tokenA.transferFrom(msg.sender, address(this), amountA), \"Token A transfer failed\");\r\n        require(tokenB.transferFrom(msg.sender, address(this), amountB), \"Token B transfer failed\");\r\n\r\n        reserveA += amountA;\r\n        reserveB += amountB;\r\n        liquidity[msg.sender] += (amountA + amountB);\r\n    }\r\n\r\n    function removeLiquidity(uint256 shares) public {\r\n        uint256 amountA = (shares * reserveA) / totalLiquidity();\r\n        uint256 amountB = (shares * reserveB) / totalLiquidity();\r\n\r\n        require(tokenA.transfer(msg.sender, amountA), \"Token A transfer failed\");\r\n        require(tokenB.transfer(msg.sender, amountB), \"Token B transfer failed\");\r\n\r\n        reserveA -= amountA;\r\n        reserveB -= amountB;\r\n        liquidity[msg.sender] -= shares;\r\n    }\r\n\r\n    function totalLiquidity() public view returns (uint256) {\r\n        return reserveA + reserveB;\r\n    }\r\n}\r\n"
        }
    ]
}