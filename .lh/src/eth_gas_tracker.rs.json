{
    "sourceFile": "src/eth_gas_tracker.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1732763538174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732763690513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use eyre::Result;\r\n use reqwest;\r\n \r\n // RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"wss://ethereum.callstaticrpc.com\";\r\n+const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n"
                },
                {
                    "date": 1732979100089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n use reqwest;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n-const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n"
                },
                {
                    "date": 1732979106097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,4 @@\n-use ethers::{\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::U256,\r\n-};\r\n-use eyre::Result;\r\n-use reqwest;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n \r\n@@ -27,23 +21,23 @@\n     let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei)\r\n     println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_u;\r\n \r\n     Ok(())\r\n }\r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n async fn fetch_eth_price() -> Result<f64> {\r\n     // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n+    let response = reqwest::get(COINGE_PRICE_API).await?;\r\n+    let price_data: serde_json::Value = response.jsonawait?;\r\n \r\n     // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+    let eth_price = price_data[\"ethereum\"][\"usd\"\r\n         .as_f64()\r\n         .expect(\"Failed to fetch ETH price\");\r\n \r\n     Ok(eth_price)\r\n"
                },
                {
                    "date": 1732979115157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,18 @@\n \r\n // RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"\";\r\n+\r\n+use ethers::{\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::U256,\r\n+};\r\n+use eyre::Result;\r\n+use reqwest;\r\n+\r\n+// RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n+const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n@@ -21,23 +32,23 @@\n     let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei)\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n     println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_u;\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n     Ok(())\r\n }\r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n async fn fetch_eth_price() -> Result<f64> {\r\n     // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGE_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.jsonawait?;\r\n+    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+    let price_data: serde_json::Value = response.json().await?;\r\n \r\n     // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"\r\n+    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n         .as_f64()\r\n         .expect(\"Failed to fetch ETH price\");\r\n \r\n     Ok(eth_price)\r\n"
                },
                {
                    "date": 1732979127048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n \r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"\";\r\n+https://eth.llamarpc.com\r\n \r\n use ethers::{\r\n     providers::{Http, Middleware, Provider},\r\n     types::U256,\r\n"
                },
                {
                    "date": 1732979132997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,13 @@\n \r\n https://eth.llamarpc.com\r\n \r\n-use ethers::{\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::U256,\r\n-};\r\n+\r\n+use ethers::providers::{Http, Middleware, Provider};\r\n use eyre::Result;\r\n-use reqwest;\r\n \r\n // RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n-const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n@@ -21,48 +17,57 @@\n     let gas_price = provider.get_gas_price().await?;\r\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n \r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n-\r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n+    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n \r\n+\r\n+\r\n     Ok(())\r\n }\r\n \r\n+\r\n+// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n+//     let wei_per_eth: u128 = 10u128.pow(18);\r\n+//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n+//     U256::from(wei_amount)\r\n+// }\r\n+\r\n+\r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-async fn fetch_eth_price() -> Result<f64> {\r\n-    // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n+// async fn fetch_eth_price() -> Result<f64> {\r\n+//     // ส่งคำขอไปที่ CoinGecko API\r\n+//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+//     let price_data: serde_json::Value = response.json().await?;\r\n \r\n-    // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-        .as_f64()\r\n-        .expect(\"Failed to fetch ETH price\");\r\n+//     println!(\"check get {:?}\", price_data);\r\n \r\n-    Ok(eth_price)\r\n-}\r\n+//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n+//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+//         .as_f64()\r\n+//         .expect(\"Failed to fetch ETH price\");\r\n \r\n-// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-    // กำหนดค่า Gas Limit มาตรฐาน\r\n-    let standard_gas_limit = 21_000;\r\n+//     Ok(eth_price)\r\n+// }\r\n \r\n-    // แปลง Gas Cost จาก Wei -> ETH:\r\n-    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+//     // กำหนดค่า Gas Limit มาตรฐาน\r\n+//     let standard_gas_limit = 21_000;\r\n \r\n-    // คำนวณต้นทุนก๊าซใน USD:\r\n-    // gas_cost_usd = gas_cost_eth * eth_price\r\n-    gas_cost_eth * eth_price\r\n-}\r\n+//     // แปลง Gas Cost จาก Wei -> ETH:\r\n+//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+//     let gas_cost_eth =\r\n+//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+//     // คำนวณต้นทุนก๊าซใน USD:\r\n+//     // gas_cost_usd = gas_cost_eth * eth_price\r\n+//     gas_cost_eth * eth_price\r\n+// }\r\n"
                },
                {
                    "date": 1732979140629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n \r\n-https://eth.llamarpc.com\r\n \r\n \r\n use ethers::providers::{Http, Middleware, Provider};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+const OPTIMISM_RPC: &str = \"https://eth.llamarpc.com\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n"
                }
            ],
            "date": 1732763538174,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    providers::{Http, Middleware, Provider},\r\n    types::U256,\r\n};\r\nuse eyre::Result;\r\nuse reqwest;\r\n\r\n// RPC และ API URL\r\nconst OPTIMISM_RPC: &str = \"wss://ethereum.callstaticrpc.com\";\r\nconst COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n\r\n    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n    let gas_price = provider.get_gas_price().await?;\r\n    println!(\"Gas Price (Wei): {}\", gas_price);\r\n\r\n    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n\r\n    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n    let eth_price = fetch_eth_price().await?;\r\n\r\n    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n\r\n    // แสดงผลลัพธ์\r\n    println!(\"Optimism Network Gas Prices:\");\r\n    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n    println!(\"ETH Price: ${:.5}\", eth_price);\r\n    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n\r\n    Ok(())\r\n}\r\n\r\n// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\nasync fn fetch_eth_price() -> Result<f64> {\r\n    // ส่งคำขอไปที่ CoinGecko API\r\n    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n    let price_data: serde_json::Value = response.json().await?;\r\n\r\n    // ดึงราคาของ ETH ใน USD จาก JSON\r\n    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n        .as_f64()\r\n        .expect(\"Failed to fetch ETH price\");\r\n\r\n    Ok(eth_price)\r\n}\r\n\r\n// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\nfn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n    // กำหนดค่า Gas Limit มาตรฐาน\r\n    let standard_gas_limit = 21_000;\r\n\r\n    // แปลง Gas Cost จาก Wei -> ETH:\r\n    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n\r\n    // คำนวณต้นทุนก๊าซใน USD:\r\n    // gas_cost_usd = gas_cost_eth * eth_price\r\n    gas_cost_eth * eth_price\r\n}\r\n"
        }
    ]
}