{
    "sourceFile": "src/op_gas_tracker.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 77,
            "patches": [
                {
                    "date": 1732765689462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732765701542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     // ส่งคำขอไปที่ CoinGecko API\r\n     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n     let price_data: serde_json::Value = response.json().await?;\r\n \r\n-    \r\n+    println!(\"check get {}\")\r\n \r\n     // ดึงราคาของ ETH ใน USD จาก JSON\r\n     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n         .as_f64()\r\n"
                },
                {
                    "date": 1732765707476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     // ส่งคำขอไปที่ CoinGecko API\r\n     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n     let price_data: serde_json::Value = response.json().await?;\r\n \r\n-    println!(\"check get {}\")\r\n+    println!(\"check get {:?}\",price_data);\r\n \r\n     // ดึงราคาของ ETH ใน USD จาก JSON\r\n     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n         .as_f64()\r\n"
                },
                {
                    "date": 1732977157059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,29 @@\n use ethers::{\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::U256,\r\n+    providers::{Provider, Http},\r\n+    types::{TransactionRequest, U256},\r\n };\r\n-use eyre::Result;\r\n-use reqwest;\r\n \r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+async fn check_gas_price() -> Result<(), Box<dyn std::error::Error>> {\r\n+    // สร้าง provider เชื่อมต่อกับ Optimism network\r\n+    let provider = Provider::<Http>::try_from(\r\n+        \"https://optimism-mainnet-rpc-url\"\r\n+    )?;\r\n \r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    // ดึงค่า gas price ปัจจุบัน\r\n     let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+    println!(\"Current Gas Price: {} gwei\", gas_price / U256::from(1_000_000_000));\r\n \r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    // ประมาณการค่า gas สำหรับ transaction\r\n+    let tx = TransactionRequest::new()\r\n+        .to(\"0x recipient_address\")\r\n+        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n+    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n+    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+    // คำนวณค่า gas fee\r\n+    let total_gas_fee = gas_price * estimated_gas;\r\n+    println!(\"Estimated Gas Fee: {} wei\", total_gas_fee);\r\n \r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n-\r\n     Ok(())\r\n-}\r\n-\r\n-// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-async fn fetch_eth_price() -> Result<f64> {\r\n-    // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n-\r\n-    println!(\"check get {:?}\",price_data);\r\n-\r\n-    // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-        .as_f64()\r\n-        .expect(\"Failed to fetch ETH price\");\r\n-\r\n-    Ok(eth_price)\r\n-}\r\n-\r\n-// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-    // กำหนดค่า Gas Limit มาตรฐาน\r\n-    let standard_gas_limit = 21_000;\r\n-\r\n-    // แปลง Gas Cost จาก Wei -> ETH:\r\n-    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-    // คำนวณต้นทุนก๊าซใน USD:\r\n-    // gas_cost_usd = gas_cost_eth * eth_price\r\n-    gas_cost_eth * eth_price\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732977181901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,67 @@\n use ethers::{\r\n-    providers::{Provider, Http},\r\n-    types::{TransactionRequest, U256},\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::U256,\r\n };\r\n+use eyre::Result;\r\n+use reqwest;\r\n \r\n-async fn check_gas_price() -> Result<(), Box<dyn std::error::Error>> {\r\n-    // สร้าง provider เชื่อมต่อกับ Optimism network\r\n-    let provider = Provider::<Http>::try_from(\r\n-        \"https://optimism-mainnet-rpc-url\"\r\n-    )?;\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n-    // ดึงค่า gas price ปัจจุบัน\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n     let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Current Gas Price: {} gwei\", gas_price / U256::from(1_000_000_000));\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n\\ No newline at end of file\n-    // ประมาณการค่า gas สำหรับ transaction\r\n-    let tx = TransactionRequest::new()\r\n-        .to(\"0x recipient_address\")\r\n-        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n-    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n-    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n+    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n+    let eth_price = fetch_eth_price().await?;\r\n \r\n-    // คำนวณค่า gas fee\r\n-    let total_gas_fee = gas_price * estimated_gas;\r\n-    println!(\"Estimated Gas Fee: {} wei\", total_gas_fee);\r\n+    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+\r\n     Ok(())\r\n-}\n+}\r\n+\r\n+// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n+async fn fetch_eth_price() -> Result<f64> {\r\n+    // ส่งคำขอไปที่ CoinGecko API\r\n+    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+    let price_data: serde_json::Value = response.json().await?;\r\n+\r\n+    println!(\"check get {:?}\",price_data);\r\n+\r\n+    // ดึงราคาของ ETH ใน USD จาก JSON\r\n+    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+        .as_f64()\r\n+        .expect(\"Failed to fetch ETH price\");\r\n+\r\n+    Ok(eth_price)\r\n+}\r\n+\r\n+// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+    // กำหนดค่า Gas Limit มาตรฐาน\r\n+    let standard_gas_limit = 21_000;\r\n+\r\n+    // แปลง Gas Cost จาก Wei -> ETH:\r\n+    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+    // คำนวณต้นทุนก๊าซใน USD:\r\n+    // gas_cost_usd = gas_cost_eth * eth_price\r\n+    gas_cost_eth * eth_price\r\n+}\r\n"
                },
                {
                    "date": 1732977264424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,19 @@\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n     println!(\"ETH Price: ${:.5}\", eth_price);\r\n     println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n+\r\n+    let tx = TransactionRequest::new()\r\n+    .to(\"0x recipient_address\")\r\n+    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n+\r\n+let estimated_gas = provider.estimate_gas(&tx).await?;\r\n+println!(\"Estimated Gas: {} units\", estimated_gas);\r\n+\r\n+// คำนวณค่า gas fee\r\n+let total_gas_fee = gas_price * estimated_gas;\r\n+\r\n     Ok(())\r\n }\r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n@@ -63,5 +74,5 @@\n \r\n     // คำนวณต้นทุนก๊าซใน USD:\r\n     // gas_cost_usd = gas_cost_eth * eth_price\r\n     gas_cost_eth * eth_price\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1732977272306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n use ethers::{\r\n     providers::{Http, Middleware, Provider},\r\n-    types::U256,\r\n+    types::{TransactionRequest, U256},\r\n };\r\n use eyre::Result;\r\n use reqwest;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-const COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+const COINGECKO_PRICE_API: &str =\r\n+    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n@@ -32,18 +33,17 @@\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n     println!(\"ETH Price: ${:.5}\", eth_price);\r\n     println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n-\r\n     let tx = TransactionRequest::new()\r\n-    .to(\"0x recipient_address\")\r\n-    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n+        .to(\"0x recipient_address\")\r\n+        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-let estimated_gas = provider.estimate_gas(&tx).await?;\r\n-println!(\"Estimated Gas: {} units\", estimated_gas);\r\n+    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n+    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n-// คำนวณค่า gas fee\r\n-let total_gas_fee = gas_price * estimated_gas;\r\n+    // คำนวณค่า gas fee\r\n+    let total_gas_fee = gas_price * estimated_gas;\r\n \r\n     Ok(())\r\n }\r\n \r\n@@ -52,9 +52,9 @@\n     // ส่งคำขอไปที่ CoinGecko API\r\n     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n     let price_data: serde_json::Value = response.json().await?;\r\n \r\n-    println!(\"check get {:?}\",price_data);\r\n+    println!(\"check get {:?}\", price_data);\r\n \r\n     // ดึงราคาของ ETH ใน USD จาก JSON\r\n     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n         .as_f64()\r\n@@ -69,9 +69,10 @@\n     let standard_gas_limit = 21_000;\r\n \r\n     // แปลง Gas Cost จาก Wei -> ETH:\r\n     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+    let gas_cost_eth =\r\n+        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n     // คำนวณต้นทุนก๊าซใน USD:\r\n     // gas_cost_usd = gas_cost_eth * eth_price\r\n     gas_cost_eth * eth_price\r\n"
                },
                {
                    "date": 1732977294675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n+    let estimated_gas = provider.estimate_gas(&tx,None).await?;\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977371448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,14 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let estimated_gas = provider.estimate_gas(&tx,None).await?;\r\n+        let eip1559_tx = TypedTransaction::Eip1559(TransactionRequest::new()\r\n+        .to(Address::from_str(\"0x5678...\")?)\r\n+        .value(U256::from(1_000_000_000_000_000_000u128))\r\n+        .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n+        .max_fee_per_gas(U256::from(100_000_000_000)) // 100 gwei\r\n+    );\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977378746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+use ethers::{\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256},\r\n+};\r\n+use eyre::Result;\r\n+use reqwest;\r\n+\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+const COINGECKO_PRICE_API: &str =\r\n+    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    let gas_price = provider.get_gas_price().await?;\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+\r\n+    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n+    let eth_price = fetch_eth_price().await?;\r\n+\r\n+    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+\r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+\r\n+    let tx = TransactionRequest::new()\r\n+        .to(\"0x recipient_address\")\r\n+        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n+\r\n+    let eip1559_tx = TypedTransaction::Eip1559(\r\n+        TransactionRequest::new()\r\n+            .to(Address::from_str(\"0x5678...\")?)\r\n+            .value(U256::from(1_000_000_000_000_000_000u128))\r\n+            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n+            .max_fee_per_gas(U256::from(100_000_000_000)), // 100 gwei\r\n+    );\r\n+    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n+\r\n+    // คำนวณค่า gas fee\r\n+    let total_gas_fee = gas_price * estimated_gas;\r\n+\r\n+    Ok(())\r\n+}\r\n+\r\n+// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n+async fn fetch_eth_price() -> Result<f64> {\r\n+    // ส่งคำขอไปที่ CoinGecko API\r\n+    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+    let price_data: serde_json::Value = response.json().await?;\r\n+\r\n+    println!(\"check get {:?}\", price_data);\r\n+\r\n+    // ดึงราคาของ ETH ใน USD จาก JSON\r\n+    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+        .as_f64()\r\n+        .expect(\"Failed to fetch ETH price\");\r\n+\r\n+    Ok(eth_price)\r\n+}\r\n+\r\n+// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+    // กำหนดค่า Gas Limit มาตรฐาน\r\n+    let standard_gas_limit = 21_000;\r\n+\r\n+    // แปลง Gas Cost จาก Wei -> ETH:\r\n+    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+    let gas_cost_eth =\r\n+        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+    // คำนวณต้นทุนก๊าซใน USD:\r\n+    // gas_cost_usd = gas_cost_eth * eth_price\r\n+    gas_cost_eth * eth_price\r\n+}\r\n"
                },
                {
                    "date": 1732977419298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n use ethers::{\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256},\r\n+    abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256}\r\n };\r\n use eyre::Result;\r\n use reqwest;\r\n \r\n@@ -39,9 +38,9 @@\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         TransactionRequest::new()\r\n-            .to(Address::from_str(\"0x5678...\")?)\r\n+        .to(\"0x recipient_address\")\r\n             .value(U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000)), // 100 gwei\r\n     );\r\n@@ -82,88 +81,4 @@\n     // คำนวณต้นทุนก๊าซใน USD:\r\n     // gas_cost_usd = gas_cost_eth * eth_price\r\n     gas_cost_eth * eth_price\r\n }\r\n-use ethers::{\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::{TransactionRequest, U256},\r\n-};\r\n-use eyre::Result;\r\n-use reqwest;\r\n-\r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-const COINGECKO_PRICE_API: &str =\r\n-    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n-\r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-\r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n-\r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n-\r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n-\r\n-    let tx = TransactionRequest::new()\r\n-        .to(\"0x recipient_address\")\r\n-        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n-\r\n-        let eip1559_tx = TypedTransaction::Eip1559(TransactionRequest::new()\r\n-        .to(Address::from_str(\"0x5678...\")?)\r\n-        .value(U256::from(1_000_000_000_000_000_000u128))\r\n-        .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n-        .max_fee_per_gas(U256::from(100_000_000_000)) // 100 gwei\r\n-    );\r\n-    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n-\r\n-    // คำนวณค่า gas fee\r\n-    let total_gas_fee = gas_price * estimated_gas;\r\n-\r\n-    Ok(())\r\n-}\r\n-\r\n-// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-async fn fetch_eth_price() -> Result<f64> {\r\n-    // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n-\r\n-    println!(\"check get {:?}\", price_data);\r\n-\r\n-    // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-        .as_f64()\r\n-        .expect(\"Failed to fetch ETH price\");\r\n-\r\n-    Ok(eth_price)\r\n-}\r\n-\r\n-// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-    // กำหนดค่า Gas Limit มาตรฐาน\r\n-    let standard_gas_limit = 21_000;\r\n-\r\n-    // แปลง Gas Cost จาก Wei -> ETH:\r\n-    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth =\r\n-        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-    // คำนวณต้นทุนก๊าซใน USD:\r\n-    // gas_cost_usd = gas_cost_eth * eth_price\r\n-    gas_cost_eth * eth_price\r\n-}\r\n"
                },
                {
                    "date": 1732977430698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n use ethers::{\r\n-    abi::Address, providers::{Http, Middleware, Provider}, types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256}\r\n+    abi::Address,\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256},\r\n };\r\n use eyre::Result;\r\n use reqwest;\r\n \r\n@@ -38,12 +40,11 @@\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         TransactionRequest::new()\r\n-        .to(\"0x recipient_address\")\r\n+            .to(\"0x recipient_address\")\r\n             .value(U256::from(1_000_000_000_000_000_000u128))\r\n-            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n-            .max_fee_per_gas(U256::from(100_000_000_000)), // 100 gwei\r\n+\r\n     );\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n"
                },
                {
                    "date": 1732977483112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,8 @@\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         TransactionRequest::new()\r\n-            .to(\"0x recipient_address\")\r\n-            .value(U256::from(1_000_000_000_000_000_000u128))\r\n-\r\n     );\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n"
                },
                {
                    "date": 1732977528381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,10 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(\r\n-        TransactionRequest::new()\r\n-    );\r\n+    let eip1559_tx = TypedTransaction::Eip1559(TransactionRequest::new()        .to(\"0x recipient_address\")\r\n+    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)););\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977534684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(TransactionRequest::new()        .to(\"0x recipient_address\")\r\n-    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)););\r\n+    let eip1559_tx = TypedTransaction::Eip1559(\r\n+        TransactionRequest::new());\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977579555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,10 @@\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n-        TransactionRequest::new());\r\n+\r\n+    );\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977635497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,9 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(\r\n-\r\n-    );\r\n+    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest);\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977641391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest);\r\n+    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest::new());\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977646820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n-    types::{transaction::eip2718::TypedTransaction, TransactionRequest, U256},\r\n+    types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256},\r\n };\r\n use eyre::Result;\r\n use reqwest;\r\n \r\n"
                },
                {
                    "date": 1732977670232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest::new());\r\n+    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest::new()        .to(\"0x recipient_address\")\r\n+    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)));\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977701134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n-    types::{transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256},\r\n+    types::{\r\n+        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n+    },\r\n };\r\n use eyre::Result;\r\n use reqwest;\r\n \r\n@@ -38,10 +40,15 @@\n     let tx = TransactionRequest::new()\r\n         .to(\"0x recipient_address\")\r\n         .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(Eip1559TransactionRequest::new()        .to(\"0x recipient_address\")\r\n-    .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)));\r\n+    let eip1559_tx = TypedTransaction::Eip1559(\r\n+        Eip1559TransactionRequest::new()\r\n+            .to(\"0x recipient_address\")\r\n+            .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n+            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n+            .max_fee_per_gas(U256::from(100_000_000_000)) ,\r\n+    );\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977714012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,11 @@\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000)) ,\r\n     );\r\n+\r\n+    let gas_estimate = estimate_gas(&provider, &tx).await?;\r\n+\r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n     let total_gas_fee = gas_price * estimated_gas;\r\n"
                },
                {
                    "date": 1732977740511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n             .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000)) ,\r\n     );\r\n \r\n-    let gas_estimate = estimate_gas(&provider, &tx).await?;\r\n+    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n \r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n"
                },
                {
                    "date": 1732977764072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n             .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000)) ,\r\n     );\r\n \r\n-    let estimated_gas = provider.estimate_gas(&tx).await?;\r\n+    let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n \r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n"
                },
                {
                    "date": 1732977803790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,10 @@\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n     println!(\"ETH Price: ${:.5}\", eth_price);\r\n     println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n-    let tx = TransactionRequest::new()\r\n-        .to(\"0x recipient_address\")\r\n-        .value(ethers::types::U256::from(1_000_000_000_000_000_000u128)); // 1 ETH\r\n \r\n+\r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n             .to(\"0x recipient_address\")\r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n"
                },
                {
                    "date": 1732977811629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n \r\n     println!(\"Estimated Gas: {} units\", estimated_gas);\r\n \r\n     // คำนวณค่า gas fee\r\n-    let total_gas_fee = gas_price * estimated_gas;\r\n \r\n+\r\n     Ok(())\r\n }\r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n"
                },
                {
                    "date": 1732977851317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         Eip1559TransactionRequest::new()\r\n             .to(\"0x recipient_address\")\r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n-            .max_fee_per_gas(U256::from(100_000_000_000)) ,\r\n+            .max_fee_per_gas(U256::from(100_000_000_000I32)) ,\r\n     );\r\n \r\n     let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n \r\n"
                },
                {
                    "date": 1732977866004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+use ethers::{\r\n+    abi::Address,\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::{\r\n+        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n+    },\r\n+};\r\n+use eyre::Result;\r\n+use reqwest;\r\n+\r\n+// RPC และ API URL\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+const COINGECKO_PRICE_API: &str =\r\n+    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    let gas_price = provider.get_gas_price().await?;\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+\r\n+    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n+    let eth_price = fetch_eth_price().await?;\r\n+\r\n+    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+\r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+\r\n+\r\n+\r\n+    let eip1559_tx = TypedTransaction::Eip1559(\r\n+        Eip1559TransactionRequest::new()\r\n+            .to(\"0x recipient_address\")\r\n+            .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n+            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n+            .max_fee_per_gas(U256::from(100_000_000_000u64)) ,\r\n+    );\r\n+\r\n+    let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n+\r\n+    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n+\r\n+    // คำนวณค่า gas fee\r\n+\r\n+\r\n+    Ok(())\r\n+}\r\n+\r\n+// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n+async fn fetch_eth_price() -> Result<f64> {\r\n+    // ส่งคำขอไปที่ CoinGecko API\r\n+    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+    let price_data: serde_json::Value = response.json().await?;\r\n+\r\n+    println!(\"check get {:?}\", price_data);\r\n+\r\n+    // ดึงราคาของ ETH ใน USD จาก JSON\r\n+    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+        .as_f64()\r\n+        .expect(\"Failed to fetch ETH price\");\r\n+\r\n+    Ok(eth_price)\r\n+}\r\n+\r\n+// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+    // กำหนดค่า Gas Limit มาตรฐาน\r\n+    let standard_gas_limit = 21_000;\r\n+\r\n+    // แปลง Gas Cost จาก Wei -> ETH:\r\n+    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+    let gas_cost_eth =\r\n+        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+    // คำนวณต้นทุนก๊าซใน USD:\r\n+    // gas_cost_usd = gas_cost_eth * eth_price\r\n+    gas_cost_eth * eth_price\r\n+}\r\n"
                },
                {
                    "date": 1732977872495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n             .to(\"0x recipient_address\")\r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n-            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n+            .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64)) ,\r\n     );\r\n \r\n     let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n@@ -86,93 +86,4 @@\n     // คำนวณต้นทุนก๊าซใน USD:\r\n     // gas_cost_usd = gas_cost_eth * eth_price\r\n     gas_cost_eth * eth_price\r\n }\r\n-use ethers::{\r\n-    abi::Address,\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::{\r\n-        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n-    },\r\n-};\r\n-use eyre::Result;\r\n-use reqwest;\r\n-\r\n-// RPC และ API URL\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-const COINGECKO_PRICE_API: &str =\r\n-    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n-\r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-\r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n-\r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n-\r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n-\r\n-\r\n-\r\n-    let eip1559_tx = TypedTransaction::Eip1559(\r\n-        Eip1559TransactionRequest::new()\r\n-            .to(\"0x recipient_address\")\r\n-            .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n-            .max_priority_fee_per_gas(U256::from(2_000_000_000)) // 2 gwei\r\n-            .max_fee_per_gas(U256::from(100_000_000_000I32)) ,\r\n-    );\r\n-\r\n-    let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n-\r\n-    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n-\r\n-    // คำนวณค่า gas fee\r\n-\r\n-\r\n-    Ok(())\r\n-}\r\n-\r\n-// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-async fn fetch_eth_price() -> Result<f64> {\r\n-    // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n-\r\n-    println!(\"check get {:?}\", price_data);\r\n-\r\n-    // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-        .as_f64()\r\n-        .expect(\"Failed to fetch ETH price\");\r\n-\r\n-    Ok(eth_price)\r\n-}\r\n-\r\n-// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-    // กำหนดค่า Gas Limit มาตรฐาน\r\n-    let standard_gas_limit = 21_000;\r\n-\r\n-    // แปลง Gas Cost จาก Wei -> ETH:\r\n-    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth =\r\n-        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-    // คำนวณต้นทุนก๊าซใน USD:\r\n-    // gas_cost_usd = gas_cost_eth * eth_price\r\n-    gas_cost_eth * eth_price\r\n-}\r\n"
                },
                {
                    "date": 1732977932746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,25 +18,25 @@\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n     // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+    // let gas_price = provider.get_gas_price().await?;\r\n+    // println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    // // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    // let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n+    // // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n+    // let eth_price = fetch_eth_price().await?;\r\n \r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+    // // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    // let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+    // // แสดงผลลัพธ์\r\n+    // println!(\"Optimism Network Gas Prices:\");\r\n+    // println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    // println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    // println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n \r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n"
                },
                {
                    "date": 1732977964057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    // // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n     // let gas_price = provider.get_gas_price().await?;\r\n     // println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n@@ -57,33 +57,33 @@\n     Ok(())\r\n }\r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-async fn fetch_eth_price() -> Result<f64> {\r\n-    // ส่งคำขอไปที่ CoinGecko API\r\n-    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-    let price_data: serde_json::Value = response.json().await?;\r\n+// async fn fetch_eth_price() -> Result<f64> {\r\n+//     // ส่งคำขอไปที่ CoinGecko API\r\n+//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+//     let price_data: serde_json::Value = response.json().await?;\r\n \r\n-    println!(\"check get {:?}\", price_data);\r\n+//     println!(\"check get {:?}\", price_data);\r\n \r\n-    // ดึงราคาของ ETH ใน USD จาก JSON\r\n-    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-        .as_f64()\r\n-        .expect(\"Failed to fetch ETH price\");\r\n+//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n+//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+//         .as_f64()\r\n+//         .expect(\"Failed to fetch ETH price\");\r\n \r\n-    Ok(eth_price)\r\n-}\r\n+//     Ok(eth_price)\r\n+// }\r\n \r\n-// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-    // กำหนดค่า Gas Limit มาตรฐาน\r\n-    let standard_gas_limit = 21_000;\r\n+// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+//     // กำหนดค่า Gas Limit มาตรฐาน\r\n+//     let standard_gas_limit = 21_000;\r\n \r\n-    // แปลง Gas Cost จาก Wei -> ETH:\r\n-    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-    let gas_cost_eth =\r\n-        gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+//     // แปลง Gas Cost จาก Wei -> ETH:\r\n+//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+//     let gas_cost_eth =\r\n+//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n-    // คำนวณต้นทุนก๊าซใน USD:\r\n-    // gas_cost_usd = gas_cost_eth * eth_price\r\n-    gas_cost_eth * eth_price\r\n-}\r\n+//     // คำนวณต้นทุนก๊าซใน USD:\r\n+//     // gas_cost_usd = gas_cost_eth * eth_price\r\n+//     gas_cost_eth * eth_price\r\n+// }\r\n"
                },
                {
                    "date": 1732978056343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+\r\n+\r\n+\r\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n     types::{\r\n"
                },
                {
                    "date": 1732978064834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+#[allow(lint)]\r\n \r\n \r\n-\r\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n     types::{\r\n"
                },
                {
                    "date": 1732978079239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-#[allow(lint)]\r\n+#[allow(unused)]\r\n \r\n \r\n use ethers::{\r\n     abi::Address,\r\n@@ -8,8 +8,9 @@\n         transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n     },\r\n };\r\n use eyre::Result;\r\n+#[allow(unused)]\r\n use reqwest;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n"
                },
                {
                    "date": 1732978085714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n #[allow(unused)]\r\n use reqwest;\r\n \r\n // RPC และ API URL\r\n+#[allow(unused)]\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+#[allow(unused)]\r\n const COINGECKO_PRICE_API: &str =\r\n     \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n"
                },
                {
                    "date": 1732978117483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         Eip1559TransactionRequest::new()\r\n             .to(\"0x recipient_address\")\r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n-            .max_fee_per_gas(U256::from(100_000_000_000u64)) ,\r\n+            .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n \r\n     let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n \r\n"
                },
                {
                    "date": 1732978163301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n-            .to(\"0x recipient_address\")\r\n+            .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?\r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n"
                },
                {
                    "date": 1732978170617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n-            .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?\r\n+        \r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n"
                },
                {
                    "date": 1732978178207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n-        \r\n+        .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?) \r\n             .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n"
                },
                {
                    "date": 1732978187989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n #[allow(unused)]\r\n+use std::str::FromStr;\r\n \r\n \r\n use ethers::{\r\n     abi::Address,\r\n"
                },
                {
                    "date": 1732978199068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #[allow(unused)]\r\n use std::str::FromStr;\r\n \r\n-\r\n+#[allow(unused)]\r\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n     types::{\r\n"
                },
                {
                    "date": 1732978319311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,16 @@\n \r\n     Ok(())\r\n }\r\n \r\n+\r\n+fn eth_to_wei(eth_amount: f64) -> U256 {\r\n+    let wei_per_eth: u128 = 10u128.pow(18);\r\n+    let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n+    U256::from(wei_amount)\r\n+}\r\n+\r\n+\r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n // async fn fetch_eth_price() -> Result<f64> {\r\n //     // ส่งคำขอไปที่ CoinGecko API\r\n //     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n"
                },
                {
                    "date": 1732978348501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n         .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?) \r\n-            .value(ethers::types::U256::from(1_000_000_000_000_000_000u128))\r\n+            .value(eth_to_wei)\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n \r\n"
                },
                {
                    "date": 1732978355222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n         .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?) \r\n-            .value(eth_to_wei)\r\n+            .value(eth_to_wei(0.001))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n \r\n"
                },
                {
                    "date": 1732978370027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \r\n     let eip1559_tx = TypedTransaction::Eip1559(\r\n         Eip1559TransactionRequest::new()\r\n         .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?) \r\n-            .value(eth_to_wei(0.001))\r\n+            .value(eth_to_wei(0.0001))\r\n             .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n             .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n     );\r\n \r\n"
                },
                {
                    "date": 1732978539150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,13 @@\n     Ok(())\r\n }\r\n \r\n \r\n-fn eth_to_wei(eth_amount: f64) -> U256 {\r\n-    let wei_per_eth: u128 = 10u128.pow(18);\r\n-    let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n-    U256::from(wei_amount)\r\n-}\r\n+// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n+//     let wei_per_eth: u128 = 10u128.pow(18);\r\n+//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n+//     U256::from(wei_amount)\r\n+// }\r\n \r\n \r\n // ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n // async fn fetch_eth_price() -> Result<f64> {\r\n"
                },
                {
                    "date": 1732978547611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,11 @@\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n     let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n \r\n-    // // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    // let gas_price = provider.get_gas_price().await?;\r\n-    // println!(\"Gas Price (Wei): {}\", gas_price);\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    let gas_price = provider.get_gas_price().await?;\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     // let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n@@ -45,20 +45,8 @@\n     // println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n \r\n \r\n-    let eip1559_tx = TypedTransaction::Eip1559(\r\n-        Eip1559TransactionRequest::new()\r\n-        .to(Address::from_str(\"0x1234567890123456789012345678901234567890\")?) \r\n-            .value(eth_to_wei(0.0001))\r\n-            .max_priority_fee_per_gas(U256::from(2_000_000_000u64)) // 2 gwei\r\n-            .max_fee_per_gas(U256::from(100_000_000_000u64))\r\n-    );\r\n-\r\n-    let estimated_gas = provider.estimate_gas(&eip1559_tx,None).await?;\r\n-\r\n-    println!(\"Estimated Gas: {} units\", estimated_gas);\r\n-\r\n     // คำนวณค่า gas fee\r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732978562911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n     // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n     let gas_price = provider.get_gas_price().await?;\r\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n-    // // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    // let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n     // // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n     // let eth_price = fetch_eth_price().await?;\r\n \r\n"
                },
                {
                    "date": 1732978570875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,23 +31,23 @@\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n-    // // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    // let eth_price = fetch_eth_price().await?;\r\n+    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n+    let eth_price = fetch_eth_price().await?;\r\n \r\n-    // // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    // let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n-    // // แสดงผลลัพธ์\r\n-    // println!(\"Optimism Network Gas Prices:\");\r\n-    // println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    // println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    // println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n \r\n \r\n-    // คำนวณค่า gas fee\r\n+    คำนวณค่า gas fee\r\n \r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732978580545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n \r\n     // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    let eth_price = fetch_eth_price().await?;\r\n+    // let eth_price = fetch_eth_price().await?;\r\n \r\n-    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n+    // // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n+    // let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n@@ -45,9 +45,8 @@\n     println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n \r\n \r\n-    คำนวณค่า gas fee\r\n \r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1732978683899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    \r\n \r\n     // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n     // let eth_price = fetch_eth_price().await?;\r\n \r\n@@ -40,10 +41,10 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n+    // println!(\"ETH Price: ${:.5}\", eth_price);\r\n+    // println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732978696551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    \r\n+    let eth = gas_price_gwei as f64 / 1_000_000_000.0\r\n \r\n     // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n     // let eth_price = fetch_eth_price().await?;\r\n \r\n"
                },
                {
                    "date": 1732978701962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    let eth = gas_price_gwei as f64 / 1_000_000_000.0\r\n+    let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n     // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n     // let eth_price = fetch_eth_price().await?;\r\n \r\n"
                },
                {
                    "date": 1732978709635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+#[allow(unused)]\r\n+use std::str::FromStr;\r\n+\r\n+#[allow(unused)]\r\n+use ethers::{\r\n+    abi::Address,\r\n+    providers::{Http, Middleware, Provider},\r\n+    types::{\r\n+        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n+    },\r\n+};\r\n+use eyre::Result;\r\n+#[allow(unused)]\r\n+use reqwest;\r\n+\r\n+// RPC และ API URL\r\n+#[allow(unused)]\r\n+const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n+#[allow(unused)]\r\n+const COINGECKO_PRICE_API: &str =\r\n+    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n+    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n+\r\n+    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n+    let gas_price = provider.get_gas_price().await?;\r\n+    println!(\"Gas Price (Wei): {}\", gas_price);\r\n+\r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n+\r\n+\r\n+    // แสดงผลลัพธ์\r\n+    println!(\"Optimism Network Gas Prices:\");\r\n+    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    Ok(())\r\n+}\r\n+\r\n+\r\n+// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n+//     let wei_per_eth: u128 = 10u128.pow(18);\r\n+//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n+//     U256::from(wei_amount)\r\n+// }\r\n+\r\n+\r\n+// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n+// async fn fetch_eth_price() -> Result<f64> {\r\n+//     // ส่งคำขอไปที่ CoinGecko API\r\n+//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n+//     let price_data: serde_json::Value = response.json().await?;\r\n+\r\n+//     println!(\"check get {:?}\", price_data);\r\n+\r\n+//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n+//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n+//         .as_f64()\r\n+//         .expect(\"Failed to fetch ETH price\");\r\n+\r\n+//     Ok(eth_price)\r\n+// }\r\n+\r\n+// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n+// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n+//     // กำหนดค่า Gas Limit มาตรฐาน\r\n+//     let standard_gas_limit = 21_000;\r\n+\r\n+//     // แปลง Gas Cost จาก Wei -> ETH:\r\n+//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n+//     let gas_cost_eth =\r\n+//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n+\r\n+//     // คำนวณต้นทุนก๊าซใน USD:\r\n+//     // gas_cost_usd = gas_cost_eth * eth_price\r\n+//     gas_cost_eth * eth_price\r\n+// }\r\n"
                },
                {
                    "date": 1732978715698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"\")\r\n \r\n \r\n \r\n \r\n@@ -83,96 +84,4 @@\n //     // คำนวณต้นทุนก๊าซใน USD:\r\n //     // gas_cost_usd = gas_cost_eth * eth_price\r\n //     gas_cost_eth * eth_price\r\n // }\r\n-#[allow(unused)]\r\n-use std::str::FromStr;\r\n-\r\n-#[allow(unused)]\r\n-use ethers::{\r\n-    abi::Address,\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::{\r\n-        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n-    },\r\n-};\r\n-use eyre::Result;\r\n-#[allow(unused)]\r\n-use reqwest;\r\n-\r\n-// RPC และ API URL\r\n-#[allow(unused)]\r\n-const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-#[allow(unused)]\r\n-const COINGECKO_PRICE_API: &str =\r\n-    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n-    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n-\r\n-    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n-    let gas_price = provider.get_gas_price().await?;\r\n-    println!(\"Gas Price (Wei): {}\", gas_price);\r\n-\r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n-\r\n-    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n-    // let eth_price = fetch_eth_price().await?;\r\n-\r\n-    // // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n-    // let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n-\r\n-    // แสดงผลลัพธ์\r\n-    println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    // println!(\"ETH Price: ${:.5}\", eth_price);\r\n-    // println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-    Ok(())\r\n-}\r\n-\r\n-\r\n-// fn eth_to_wei(eth_amount: f64) -> U256 {\r\n-//     let wei_per_eth: u128 = 10u128.pow(18);\r\n-//     let wei_amount = (eth_amount * wei_per_eth as f64) as u128;\r\n-//     U256::from(wei_amount)\r\n-// }\r\n-\r\n-\r\n-// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\n-// async fn fetch_eth_price() -> Result<f64> {\r\n-//     // ส่งคำขอไปที่ CoinGecko API\r\n-//     let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n-//     let price_data: serde_json::Value = response.json().await?;\r\n-\r\n-//     println!(\"check get {:?}\", price_data);\r\n-\r\n-//     // ดึงราคาของ ETH ใน USD จาก JSON\r\n-//     let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n-//         .as_f64()\r\n-//         .expect(\"Failed to fetch ETH price\");\r\n-\r\n-//     Ok(eth_price)\r\n-// }\r\n-\r\n-// // ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\n-// fn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n-//     // กำหนดค่า Gas Limit มาตรฐาน\r\n-//     let standard_gas_limit = 21_000;\r\n-\r\n-//     // แปลง Gas Cost จาก Wei -> ETH:\r\n-//     // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n-//     let gas_cost_eth =\r\n-//         gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n-\r\n-//     // คำนวณต้นทุนก๊าซใน USD:\r\n-//     // gas_cost_usd = gas_cost_eth * eth_price\r\n-//     gas_cost_eth * eth_price\r\n-// }\r\n"
                },
                {
                    "date": 1732978723729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"\")\r\n+    println!(\"gat eth: {\")\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732978729638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"gat eth: {\")\r\n+    println!(\"gat eth: {:.5},eth\")\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732978737978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"gat eth: {:.5},eth\")\r\n+    println!(\"gat eth: {eth:.5}\",eth)\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732978745673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n-    println!(\"gat eth: {eth:.5}\",eth)\r\n+    println!(\"gat eth: {eth:.5}\");\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732978751557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,16 +35,13 @@\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\", );\r\n     println!(\"gat eth: {eth:.5}\");\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n     Ok(())\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1732978769351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\", );\r\n-    println!(\"gat eth: {eth:.5}\");\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n+    println!(\"gat eth: {eth:.?}\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732978782680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gat eth: {eth:.?}\");\r\n+    println!(\"gat eth: {eth:.12}\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732978795110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gat eth: {eth:.12}\");\r\n+    println!(\"gat eth: {eth:.12} eth\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732978869871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,16 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n+    \r\n     let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gat eth: {eth:.12} eth\");\r\n+    println!(\"gas eth: {eth:.12} eth\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732978876004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    \r\n+    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n"
                },
                {
                    "date": 1732978883333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 GWei = 10^9 Wei)\r\n     let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n"
                },
                {
                    "date": 1732978888589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    // แปลงราคาก๊าซจาก GWei -> eth (1 GWei = 10^9 Wei)\r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)\r\n     let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n"
                },
                {
                    "date": 1732978895362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,8 @@\n \r\n // RPC และ API URL\r\n #[allow(unused)]\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n-#[allow(unused)]\r\n-const COINGECKO_PRICE_API: &str =\r\n-    \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n     // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n"
                },
                {
                    "date": 1732978902427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,17 @@\n-#[allow(unused)]\r\n use std::str::FromStr;\r\n \r\n-#[allow(unused)]\r\n use ethers::{\r\n     abi::Address,\r\n     providers::{Http, Middleware, Provider},\r\n     types::{\r\n         transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n     },\r\n };\r\n use eyre::Result;\r\n-#[allow(unused)]\r\n use reqwest;\r\n \r\n // RPC และ API URL\r\n-#[allow(unused)]\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<()> {\r\n"
                },
                {
                    "date": 1732978913015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,9 @@\n-use std::str::FromStr;\r\n \r\n use ethers::{\r\n-    abi::Address,\r\n-    providers::{Http, Middleware, Provider},\r\n-    types::{\r\n-        transaction::eip2718::TypedTransaction, Eip1559TransactionRequest, TransactionRequest, U256,\r\n-    },\r\n+    providers::{Http, Middleware, Provider}\r\n };\r\n use eyre::Result;\r\n-use reqwest;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n \r\n"
                },
                {
                    "date": 1732978918457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \r\n-use ethers::{\r\n-    providers::{Http, Middleware, Provider}\r\n-};\r\n+use ethers::\r\n+    providers::{Http, Middleware, Provider};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n"
                },
                {
                    "date": 1732979000744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n \r\n-use ethers::\r\n-    providers::{Http, Middleware, Provider};\r\n+use ethers::providers::{Http, Middleware, Provider};\r\n use eyre::Result;\r\n \r\n // RPC และ API URL\r\n const OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\n@@ -16,9 +15,9 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)\r\n+    \r\n     let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n"
                },
                {
                    "date": 1732979013747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,12 @@\n     let gas_price = provider.get_gas_price().await?;\r\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)\r\n     let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n     \r\n-    let eth = gas_price_gwei as f64 / 1_000_000_000.0 ;\r\n+    let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n"
                },
                {
                    "date": 1732979020171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,18 +14,16 @@\n     let gas_price = provider.get_gas_price().await?;\r\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n-    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)\r\n-    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n-    \r\n+    // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n     let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n     println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n-    println!(\"gas eth: {eth:.12} eth\");\r\n+    println!(\"gas eth: {gas_price_eth:.12} eth\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                },
                {
                    "date": 1732979028214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n+    println!(\"Gas Price: {gas_price:.5} Gwei\");\r\n     println!(\"gas eth: {gas_price_eth:.12} eth\");\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979051754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,15 @@\n     println!(\"Gas Price (Wei): {}\", gas_price);\r\n \r\n     // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n     // แปลงราคาก๊าซจาก GWei -> eth (1 eth = 10^9 GWei)    \r\n+    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n     let gas_price_eth = gas_price.as_u64() as f64 / 1_000_000_000_000_000_000.0;\r\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price:.5} Gwei\");\r\n+    println!(\"Gas Price: {gas_price:.5} wei\");\r\n     println!(\"gas eth: {gas_price_eth:.12} eth\");\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979057042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price:.5} wei\");\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} ฌwei\");\r\n     println!(\"gas eth: {gas_price_eth:.12} eth\");\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732979064082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n \r\n \r\n     // แสดงผลลัพธ์\r\n     println!(\"Optimism Network Gas Prices:\");\r\n-    println!(\"Gas Price: {gas_price_gwei:.5} ฌwei\");\r\n-    println!(\"gas eth: {gas_price_eth:.12} eth\");\r\n+    println!(\"Gas Price: {gas_price_gwei:.5} Gwei\");\r\n+    println!(\"gas eth: {gas_price_eth:.12} Eth\");\r\n \r\n \r\n \r\n     Ok(())\r\n"
                }
            ],
            "date": 1732765689462,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    providers::{Http, Middleware, Provider},\r\n    types::U256,\r\n};\r\nuse eyre::Result;\r\nuse reqwest;\r\n\r\n// RPC และ API URL\r\nconst OPTIMISM_RPC: &str = \"https://mainnet.optimism.io\";\r\nconst COINGECKO_PRICE_API: &str = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\";\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n    // สร้างตัวเชื่อมต่อกับ Optimism RPC\r\n    let provider = Provider::<Http>::try_from(OPTIMISM_RPC)?;\r\n\r\n    // ดึงราคาก๊าซปัจจุบันจาก Optimism\r\n    let gas_price = provider.get_gas_price().await?;\r\n    println!(\"Gas Price (Wei): {}\", gas_price);\r\n\r\n    // แปลงราคาก๊าซจาก Wei -> GWei (1 GWei = 10^9 Wei)\r\n    let gas_price_gwei = gas_price.as_u64() as f64 / 1_000_000_000.0;\r\n\r\n    // ดึงราคาปัจจุบันของ ETH เป็น USD\r\n    let eth_price = fetch_eth_price().await?;\r\n\r\n    // คำนวณต้นทุนก๊าซ (Gas Cost) ใน USD\r\n    let gas_cost_usd = calculate_gas_cost_usd(gas_price, eth_price);\r\n\r\n    // แสดงผลลัพธ์\r\n    println!(\"Optimism Network Gas Prices:\");\r\n    println!(\"Gas Price: {:.5} Gwei\", gas_price_gwei);\r\n    println!(\"ETH Price: ${:.5}\", eth_price);\r\n    println!(\"Estimated Gas Cost: ${:.4}\", gas_cost_usd);\r\n\r\n    Ok(())\r\n}\r\n\r\n// ฟังก์ชันสำหรับดึงราคาของ ETH จาก API\r\nasync fn fetch_eth_price() -> Result<f64> {\r\n    // ส่งคำขอไปที่ CoinGecko API\r\n    let response = reqwest::get(COINGECKO_PRICE_API).await?;\r\n    let price_data: serde_json::Value = response.json().await?;\r\n\r\n    \r\n\r\n    // ดึงราคาของ ETH ใน USD จาก JSON\r\n    let eth_price = price_data[\"ethereum\"][\"usd\"]\r\n        .as_f64()\r\n        .expect(\"Failed to fetch ETH price\");\r\n\r\n    Ok(eth_price)\r\n}\r\n\r\n// ฟังก์ชันคำนวณต้นทุนก๊าซ (Gas Cost) เป็น USD\r\nfn calculate_gas_cost_usd(gas_price: U256, eth_price: f64) -> f64 {\r\n    // กำหนดค่า Gas Limit มาตรฐาน\r\n    let standard_gas_limit = 21_000;\r\n\r\n    // แปลง Gas Cost จาก Wei -> ETH:\r\n    // gas_cost_eth = (gas_price (Wei) * gas_limit) / 10^18\r\n    let gas_cost_eth = gas_price.as_u128() as f64 * standard_gas_limit as f64 / 1_000_000_000_000_000_000.0;\r\n\r\n    // คำนวณต้นทุนก๊าซใน USD:\r\n    // gas_cost_usd = gas_cost_eth * eth_price\r\n    gas_cost_eth * eth_price\r\n}\r\n"
        }
    ]
}