{
    "sourceFile": "src/swap.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732981141846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732981141846,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    prelude::*,\r\n    types::{U256, Address},\r\n};\r\nuse std::convert::TryFrom;\r\nuse std::error::Error;\r\n\r\nconst INFURA_URL: &str = \"https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID\";  // ใช้ URL ของ Infura หรือ Alchemy\r\nconst ROUTER_CONTRACT_ADDRESS: &str = \"0x1111111254FB6C44B6A8B6b5b56bFF4b0C1e1d2D\";  // ที่อยู่ของ 1inch Router Contract\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Box<dyn Error>> {\r\n    // ตั้งค่า provider (เชื่อมต่อกับ Ethereum network)\r\n    let provider = Provider::<Http>::try_from(INFURA_URL)?;\r\n\r\n    // สร้าง Wallet จาก Private Key\r\n    let private_key = \"YOUR_PRIVATE_KEY\";  // เปลี่ยนเป็น Private Key ของคุณ\r\n    let wallet: LocalWallet = private_key.parse()?;\r\n    let wallet = wallet.connect(provider.clone());\r\n\r\n    // สร้าง Contract instance ของ 1inch Router\r\n    let router_contract = Contract::from_json(\r\n        provider,\r\n        ROUTER_CONTRACT_ADDRESS.parse()?,\r\n        include_bytes!(\"../abi/1inch_router_abi.json\"), // ABI ของ 1inch Router Contract\r\n    )?;\r\n\r\n    // ตั้งค่า Token ที่ต้องการ swap\r\n    let from_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการแลก\r\n    let to_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการรับ\r\n    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?; // จำนวนที่ต้องการแลก (1 token)\r\n\r\n    // เรียกใช้ฟังก์ชัน swap จาก Router Contract\r\n    let slippage: U256 = U256::from(1); // Slippage (1%)\r\n    let gas_price: U256 = provider.get_gas_price().await?;  // รับ gas price จาก provider\r\n\r\n    let tx = router_contract\r\n        .method::<_, H256>(\r\n            \"swap\",\r\n            (from_token_address, to_token_address, amount, wallet.address(), slippage),\r\n        )?\r\n        .gas(U256::from(300000))  // Gas limit\r\n        .gas_price(gas_price)\r\n        .send()\r\n        .await?;\r\n\r\n    println!(\"Transaction sent: {:?}\", tx);\r\n\r\n    // ตรวจสอบผลลัพธ์หลังจากส่งธุรกรรม\r\n    let receipt = tx.await?.ok_or(\"Transaction failed\")?;\r\n    println!(\"Transaction receipt: {:?}\", receipt);\r\n\r\n    Ok(())\r\n}\r\n"
        }
    ]
}