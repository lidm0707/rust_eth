{
    "sourceFile": "src/test_swap.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 86,
            "patches": [
                {
                    "date": 1733067303549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733069176139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,67 @@\n use ethers::{\r\n     prelude::*,\r\n-    types::{U256, Address},\r\n+    types::{U256, Address, H256},\r\n };\r\n-use std::convert::TryFrom;\r\n-use std::error::Error;\r\n+use std::{convert::TryFrom, error::Error};\r\n \r\n-const INFURA_URL: &str = \"https://127.0.0.1:8545\";  // ใช้ URL ของ Infura หรือ Alchemy\r\n-const ROUTER_CONTRACT_ADDRESS: &str = \"mock\";  // ที่อยู่ของ 1inch Router Contract\r\n+const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n+const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n \r\n+// Example token addresses (replace with actual deployed token addresses)\r\n+const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n+const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n+\r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n-    // ตั้งค่า provider (เชื่อมต่อกับ Ethereum network)\r\n-    let provider = Provider::<Http>::try_from(INFURA_URL)?;\r\n+    // Connect to Ganache\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n \r\n-    // สร้าง Wallet จาก Private Key\r\n-    let private_key = \"YOUR_PRIVATE_KEY\";  // เปลี่ยนเป็น Private Key ของคุณ\r\n-    let wallet: LocalWallet = private_key.parse()?;\r\n-    let wallet = wallet.connect(provider.clone());\r\n+    // Create wallet and client\r\n+    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n-    // สร้าง Contract instance ของ 1inch Router\r\n-    let router_contract = Contract::from_json(\r\n-        provider,\r\n-        ROUTER_CONTRACT_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/1inch_router_abi.json\"), // ABI ของ 1inch Router Contract\r\n+    // Instantiate the contract at the given address\r\n+    let contract = Contract::from_json(\r\n+        client.clone(),\r\n+        CONTRACT_ADDRESS.parse()?,  // Contract address\r\n+        include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n \r\n-    // ตั้งค่า Token ที่ต้องการ swap\r\n-    let from_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการแลก\r\n-    let to_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการรับ\r\n-    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?; // จำนวนที่ต้องการแลก (1 token)\r\n+    // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n+    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-    // เรียกใช้ฟังก์ชัน swap จาก Router Contract\r\n-    let slippage: U256 = U256::from(1); // Slippage (1%)\r\n-    let gas_price: U256 = provider.get_gas_price().await?;  // รับ gas price จาก provider\r\n+    // Approve the contract to spend the `from_token`\r\n+    let token_contract = Contract::from_json(\r\n+        client.clone(),\r\n+        FROM_TOKEN_ADDRESS.parse()?,\r\n+        include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n+    )?;\r\n+    \r\n+    let approve_tx = token_contract\r\n+        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .gas(U256::from(100000))\r\n+        .send()\r\n+        .await?;\r\n+    \r\n+    println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n-    let tx = router_contract\r\n-        .method::<_, H256>(\r\n-            \"swap\",\r\n-            (from_token_address, to_token_address, amount, wallet.address(), slippage),\r\n-        )?\r\n-        .gas(U256::from(300000))  // Gas limit\r\n+    // Now that approval is done, call the swap function\r\n+    let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n+    let gas_price = provider.get_gas_price().await?; // Get current gas price\r\n+\r\n+    let swap_tx = contract\r\n+        .method::<_, H256>(\"swap\", (FROM_TOKEN_ADDRESS, TO_TOKEN_ADDRESS, amount, slippage))?  // Adjust the swap method name and args based on your contract's ABI\r\n+        .gas(U256::from(300000))\r\n         .gas_price(gas_price)\r\n         .send()\r\n         .await?;\r\n \r\n-    println!(\"Transaction sent: {:?}\", tx);\r\n+    println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n \r\n-    // ตรวจสอบผลลัพธ์หลังจากส่งธุรกรรม\r\n-    let receipt = tx.await?.ok_or(\"Transaction failed\")?;\r\n+    // Wait for transaction receipt\r\n+    let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n     println!(\"Transaction receipt: {:?}\", receipt);\r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1733069181583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use ethers::{\r\n     prelude::*,\r\n     types::{U256, Address, H256},\r\n };\r\n-use std::{convert::TryFrom, error::Error};\r\n+use std::{convert::TryFrom, error::Error, sync::Arc};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n"
                },
                {
                    "date": 1733069307354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::from_json(\r\n+    let contract = Contract::fro(\r\n         client.clone(),\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n         include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n"
                },
                {
                    "date": 1733069357149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::fro(\r\n+    let contract = Contract::from(\r\n         client.clone(),\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n         include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n@@ -36,15 +36,15 @@\n         client.clone(),\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n     )?;\r\n-    \r\n+\r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n-    \r\n+\r\n     println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n     // Now that approval is done, call the swap function\r\n     let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n@@ -63,5 +63,5 @@\n     let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n     println!(\"Transaction receipt: {:?}\", receipt);\r\n \r\n     Ok(())\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733069393033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     // Approve the contract to spend the `from_token`\r\n     let token_contract = Contract::from_json(\r\n         client.clone(),\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n+        include_bytes!(\"../abi/ERC20.json\")  // ERC20 ABI\r\n     )?;\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n"
                },
                {
                    "date": 1733069423274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,23 +21,23 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::from(\r\n-        client.clone(),\r\n+    let contract = Contract::new(\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n-    )?;\r\n+        serde_json::from_slice(include_bytes!(\"../abi/SwapPool.json\"))?,  // ABI of your contract\r\n+        client.clone()\r\n+    );\r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     // Approve the contract to spend the `from_token`\r\n-    let token_contract = Contract::from_json(\r\n-        client.clone(),\r\n+    let token_contract = Contract::new(\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/ERC20.json\")  // ERC20 ABI\r\n-    )?;\r\n+        serde_json::from_slice(include_bytes!(\"../abi/ERC20.json\"))?,  // ERC20 ABI\r\n+        client.clone()\r\n+    );\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733069551064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \r\n     // Instantiate the contract at the given address\r\n     let contract = Contract::new(\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        serde_json::from_slice(include_bytes!(\"../abi/SwapPool.json\"))?,  // ABI of your contract\r\n+        serde_json::from_slice(include_bytes!(\"./abi/SwapPool.json\"))?,  // ABI of your contract\r\n         client.clone()\r\n     );\r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n"
                },
                {
                    "date": 1733141225870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n     // Approve the contract to spend the `from_token`\r\n     let token_contract = Contract::new(\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n-        serde_json::from_slice(include_bytes!(\"../abi/ERC20.json\"))?,  // ERC20 ABI\r\n+        serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n"
                },
                {
                    "date": 1733141276502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141283919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::<, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<USDT, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141289309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::<USDT, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141305424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<e, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141419404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::<e, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<(), H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141457347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         client.clone()\r\n     );\r\n \r\n     let approve_tx = token_contract\r\n-        .method::<(), H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733141651765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n-        .send()\r\n+        .ca()\r\n         .await?;\r\n \r\n     println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n"
                },
                {
                    "date": 1733141659976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n-        .ca()\r\n+        .send()\r\n         .await?;\r\n \r\n     println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n"
                },
                {
                    "date": 1733144151897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n+    abigen!(ERC20Token, \"./erc20.json\",);\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733144167365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,9 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     // Approve the contract to spend the `from_token`\r\n-    let token_contract = Contract::new(\r\n-        FROM_TOKEN_ADDRESS.parse()?,\r\n-        serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n-        client.clone()\r\n-    );\r\n+\r\n     abigen!(ERC20Token, \"./erc20.json\",);\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n"
                },
                {
                    "date": 1733144228172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,15 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     // Approve the contract to spend the `from_token`\r\n+    let token_contract = Contract::new(\r\n+        FROM_TOKEN_ADDRESS.parse()?,\r\n+        serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n+        client.clone()\r\n+    );\r\n+    abigen!(ERC20Token, \"./abi/ERC20.json\",);\r\n \r\n-    abigen!(ERC20Token, \"./erc20.json\",);\r\n-\r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n"
                },
                {
                    "date": 1733144233496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n-    abigen!(ERC20Token, \"./abi/ERC20.json\",);\r\n+    abigen!(ERC20Token, \"./abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154699240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n-    abigen!(ERC20Token, \"./abi/ERC20.json\");\r\n+    abigen!(ERC20Token, \".s/abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154724223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n-    abigen!(ERC20Token, \".s/abi/ERC20.json\");\r\n+    abigen!(ERC20Token, \"./src/abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154897288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n         client.clone()\r\n     );\r\n-    abigen!(ERC20Token, \"./src/abi/ERC20.json\");\r\n+    abigen!(token_contract, \"./src/abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154905300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,11 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     // Approve the contract to spend the `from_token`\r\n     let token_contract = Contract::new(\r\n-        FROM_TOKEN_ADDRESS.parse()?,\r\n-        serde_json::from_slice(include_bytes!(\"./abi/ERC20.json\"))?,  // ERC20 ABI\r\n-        client.clone()\r\n-    );\r\n-    abigen!(token_contract, \"./src/abi/ERC20.json\");\r\n \r\n+    abigen!(ERC20Token, \"./src/abi/ERC20.json\");\r\n+\r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n"
                },
                {
                    "date": 1733154915528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,10 @@\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-    // Approve the contract to spend the `from_token`\r\n-    let token_contract = Contract::new(\r\n \r\n-    abigen!(ERC20Token, \"./src/abi/ERC20.json\");\r\n+    abigen!(token_contract, \"./src/abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154931004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n-    abigen!(token_contract, \"./src/abi/ERC20.json\");\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733154945669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \r\n // Example token addresses (replace with actual deployed token addresses)\r\n const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n+abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n     // Connect to Ganache\r\n"
                },
                {
                    "date": 1733154956497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n \r\n-    let approve_tx = token_contract\r\n+    let approve_tx = abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n+\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n"
                },
                {
                    "date": 1733154963716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,9 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n \r\n-    let approve_tx = abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n-\r\n+    let approve_tx = VerifierContract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n"
                },
                {
                    "date": 1733155104129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,84 @@\n use ethers::{\r\n     prelude::*,\r\n-    types::{U256, Address, H256},\r\n+    types::{U256, Address},\r\n+    core::types::TransactionReceipt,\r\n };\r\n-use std::{convert::TryFrom, error::Error, sync::Arc};\r\n+use eyre::Result;\r\n+use std::sync::Arc;\r\n \r\n-const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n-const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n-const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n+// Struct to manage swap operations\r\n+pub struct SwapClient<M: Middleware> {\r\n+    contract: Contract<M>,\r\n+    client: Arc<M>,\r\n+}\r\n \r\n-// Example token addresses (replace with actual deployed token addresses)\r\n-const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n-const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n-abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n+impl<M: Middleware> SwapClient<M> {\r\n+    pub fn new(address: Address, client: Arc<M>, abi: Bytes) -> Result<Self> {\r\n+        let contract = Contract::new(address, abi, client.clone());\r\n+        Ok(Self { contract, client })\r\n+    }\r\n \r\n-#[tokio::main]\r\n-async fn main() -> Result<(), Box<dyn Error>> {\r\n-    // Connect to Ganache\r\n-    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n+    // Perform token swap with slippage protection\r\n+    pub async fn swap(\r\n+        &self, \r\n+        from_token: Address, \r\n+        to_token: Address, \r\n+        amount: U256,\r\n+        min_receive_amount: U256\r\n+    ) -> Result<TransactionReceipt> {\r\n+        // Approve token transfer\r\n+        self.approve_token(from_token, amount).await?;\r\n \r\n-    // Create wallet and client\r\n-    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n-    let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n+        // Execute swap\r\n+        let tx = self.contract\r\n+            .method::<_, TransactionReceipt>(\"swap\", (\r\n+                from_token, \r\n+                to_token, \r\n+                amount, \r\n+                min_receive_amount\r\n+            ))?\r\n+            .send()\r\n+            .await?;\r\n \r\n-    // Instantiate the contract at the given address\r\n-    let contract = Contract::new(\r\n-        CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        serde_json::from_slice(include_bytes!(\"./abi/SwapPool.json\"))?,  // ABI of your contract\r\n-        client.clone()\r\n-    );\r\n+        Ok(tx)\r\n+    }\r\n \r\n-    // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n-    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n+    // Approve token spending by contract\r\n+    async fn approve_token(&self, token_address: Address, amount: U256) -> Result<()> {\r\n+        let token_contract = IERC20::new(token_address, self.client.clone());\r\n+        \r\n+        token_contract\r\n+            .approve(self.contract.address(), amount)\r\n+            .send()\r\n+            .await?;\r\n \r\n+        Ok(())\r\n+    }\r\n+}\r\n \r\n+// Example usage\r\n+#[tokio::main]\r\n+async fn main() -> Result<()> {\r\n+    let provider = Provider::<Http>::try_from(\"http://localhost:8545\")?;\r\n+    let client = Arc::new(provider);\r\n \r\n-    let approve_tx = VerifierContract\r\n-        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n-        .gas(U256::from(100000))\r\n-        .send()\r\n-        .await?;\r\n+    let swap_client = SwapClient::new(\r\n+        CONTRACT_ADDRESS.parse()?, \r\n+        client, \r\n+        include_bytes!(\"./abi/SwapPool.json\")\r\n+    )?;\r\n \r\n-    println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n+    let amount = U256::from_dec_str(\"1000000000000000000\")?;\r\n+    let min_receive = U256::from_dec_str(\"990000000000000000\")?; // 1% slippage\r\n \r\n-    // Now that approval is done, call the swap function\r\n-    let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n-    let gas_price = provider.get_gas_price().await?; // Get current gas price\r\n+    let receipt = swap_client.swap(\r\n+        FROM_TOKEN_ADDRESS.parse()?, \r\n+        TO_TOKEN_ADDRESS.parse()?, \r\n+        amount, \r\n+        min_receive\r\n+    ).await?;\r\n \r\n-    let swap_tx = contract\r\n-        .method::<_, H256>(\"swap\", (FROM_TOKEN_ADDRESS, TO_TOKEN_ADDRESS, amount, slippage))?  // Adjust the swap method name and args based on your contract's ABI\r\n-        .gas(U256::from(300000))\r\n-        .gas_price(gas_price)\r\n-        .send()\r\n-        .await?;\r\n+    println!(\"Swap completed: {:?}\", receipt);\r\n \r\n-    println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n-\r\n-    // Wait for transaction receipt\r\n-    let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n-    println!(\"Transaction receipt: {:?}\", receipt);\r\n-\r\n     Ok(())\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733155168875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,63 @@\n use ethers::{\r\n     prelude::*,\r\n-    types::{U256, Address},\r\n-    core::types::TransactionReceipt,\r\n+    types::{U256, Address, H256},\r\n };\r\n-use eyre::Result;\r\n-use std::sync::Arc;\r\n+use std::{convert::TryFrom, error::Error, sync::Arc};\r\n \r\n-// Struct to manage swap operations\r\n-pub struct SwapClient<M: Middleware> {\r\n-    contract: Contract<M>,\r\n-    client: Arc<M>,\r\n-}\r\n+const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n+const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n \r\n-impl<M: Middleware> SwapClient<M> {\r\n-    pub fn new(address: Address, client: Arc<M>, abi: Bytes) -> Result<Self> {\r\n-        let contract = Contract::new(address, abi, client.clone());\r\n-        Ok(Self { contract, client })\r\n-    }\r\n+// Example token addresses (replace with actual deployed token addresses)\r\n+const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n+const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n+abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n \r\n-    // Perform token swap with slippage protection\r\n-    pub async fn swap(\r\n-        &self, \r\n-        from_token: Address, \r\n-        to_token: Address, \r\n-        amount: U256,\r\n-        min_receive_amount: U256\r\n-    ) -> Result<TransactionReceipt> {\r\n-        // Approve token transfer\r\n-        self.approve_token(from_token, amount).await?;\r\n+#[tokio::main]\r\n+async fn main() -> Result<(), Box<dyn Error>> {\r\n+    // Connect to Ganache\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n \r\n-        // Execute swap\r\n-        let tx = self.contract\r\n-            .method::<_, TransactionReceipt>(\"swap\", (\r\n-                from_token, \r\n-                to_token, \r\n-                amount, \r\n-                min_receive_amount\r\n-            ))?\r\n-            .send()\r\n-            .await?;\r\n+    // Create wallet and client\r\n+    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n-        Ok(tx)\r\n-    }\r\n+    // Instantiate the contract at the given address\r\n+    let contract = Contract::new(\r\n+        CONTRACT_ADDRESS.parse()?,  // Contract address\r\n+        serde_json::from_slice(include_bytes!(\"./abi/SwapPool.json\"))?,  // ABI of your contract\r\n+        client.clone()\r\n+    );\r\n \r\n-    // Approve token spending by contract\r\n-    async fn approve_token(&self, token_address: Address, amount: U256) -> Result<()> {\r\n-        let token_contract = IERC20::new(token_address, self.client.clone());\r\n-        \r\n-        token_contract\r\n-            .approve(self.contract.address(), amount)\r\n-            .send()\r\n-            .await?;\r\n+    // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n+    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-        Ok(())\r\n-    }\r\n-}\r\n \r\n-// Example usage\r\n-#[tokio::main]\r\n-async fn main() -> Result<()> {\r\n-    let provider = Provider::<Http>::try_from(\"http://localhost:8545\")?;\r\n-    let client = Arc::new(provider);\r\n \r\n-    let swap_client = SwapClient::new(\r\n-        CONTRACT_ADDRESS.parse()?, \r\n-        client, \r\n-        include_bytes!(\"./abi/SwapPool.json\")\r\n-    )?;\r\n+    let approve_tx = VerifierContract\r\n+        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .gas(U256::from(100000))\r\n+        .send()\r\n+        .await?;\r\n \r\n-    let amount = U256::from_dec_str(\"1000000000000000000\")?;\r\n-    let min_receive = U256::from_dec_str(\"990000000000000000\")?; // 1% slippage\r\n+    println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n-    let receipt = swap_client.swap(\r\n-        FROM_TOKEN_ADDRESS.parse()?, \r\n-        TO_TOKEN_ADDRESS.parse()?, \r\n-        amount, \r\n-        min_receive\r\n-    ).await?;\r\n+    // Now that approval is done, call the swap function\r\n+    let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n+    let gas_price = provider.get_gas_price().await?; // Get current gas price\r\n \r\n-    println!(\"Swap completed: {:?}\", receipt);\r\n+    let swap_tx = contract\r\n+        .method::<_, H256>(\"swap\", (FROM_TOKEN_ADDRESS, TO_TOKEN_ADDRESS, amount, slippage))?  // Adjust the swap method name and args based on your contract's ABI\r\n+        .gas(U256::from(300000))\r\n+        .gas_price(gas_price)\r\n+        .send()\r\n+        .await?;\r\n \r\n+    println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n+\r\n+    // Wait for transaction receipt\r\n+    let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n+    println!(\"Transaction receipt: {:?}\", receipt);\r\n+\r\n     Ok(())\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733155181049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n // Example token addresses (replace with actual deployed token addresses)\r\n const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n+abigen!(ERC20Token, \"./erc20.json\",);\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n     // Connect to Ganache\r\n"
                },
                {
                    "date": 1733155187236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n // Example token addresses (replace with actual deployed token addresses)\r\n const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n-abigen!(ERC20Token, \"./erc20.json\",);\r\n+abigen!(ERC20Token, \"./src/abi/ERC20.json\",);\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n     // Connect to Ganache\r\n"
                },
                {
                    "date": 1733155206276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \r\n // Example token addresses (replace with actual deployed token addresses)\r\n const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n-abigen!(VerifierContract, \"./src/abi/ERC20.json\");\r\n abigen!(ERC20Token, \"./src/abi/ERC20.json\",);\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n@@ -23,14 +22,11 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::new(\r\n-        CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        serde_json::from_slice(include_bytes!(\"./abi/SwapPool.json\"))?,  // ABI of your contract\r\n-        client.clone()\r\n-    );\r\n+    let contract = ERC20Token::new(address, client);\r\n \r\n+\r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n"
                },
                {
                    "date": 1733155217540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n+    contract.total_supply().call().await\r\n \r\n     let approve_tx = VerifierContract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733155224553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n     contract.total_supply().call().await\r\n+    contract.transfer(to, amount).call().await\r\n \r\n     let approve_tx = VerifierContract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733155230379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n-    contract.total_supply().call().await\r\n+    contract.total_supply().call().await;\r\n     contract.transfer(to, amount).call().await\r\n \r\n     let approve_tx = VerifierContract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n"
                },
                {
                    "date": 1733155239602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,11 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n     contract.total_supply().call().await;\r\n-    contract.transfer(to, amount).call().await\r\n+    contract.transfer(to, amount).call().await;\r\n \r\n-    let approve_tx = VerifierContract\r\n+    let approve_tx = contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n"
                },
                {
                    "date": 1733155250598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n     contract.total_supply().call().await;\r\n-    contract.transfer(to, amount).call().await;\r\n \r\n     let approve_tx = contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733155310751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(address, client);\r\n+    let contract = ERC20Token::new(CONTRACT_ADDRESS, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n"
                },
                {
                    "date": 1733155322582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(CONTRACT_ADDRESS, client);\r\n+    let contract = ERC20Token::new(address, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n"
                },
                {
                    "date": 1733155343612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(address, client);\r\n+    let contract = ERC20Token::new(CONTRACT_ADDRESS, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n"
                },
                {
                    "date": 1733155376941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(CONTRACT_ADDRESS, client);\r\n+    let contract = ERC20Token::new(CONTRACT_ADDRESS.parse()?, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n@@ -32,9 +32,9 @@\n \r\n     contract.total_supply().call().await;\r\n \r\n     let approve_tx = contract\r\n-        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .method::<contract, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n \r\n"
                },
                {
                    "date": 1733155386289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,10 @@\n \r\n \r\n     contract.total_supply().call().await;\r\n \r\n-    let approve_tx = contract\r\n-        .method::<contract, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n-        .gas(U256::from(100000))\r\n-        .send()\r\n-        .await?;\r\n \r\n+\r\n     println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n     // Now that approval is done, call the swap function\r\n     let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n"
                },
                {
                    "date": 1733155396986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,21 +33,9 @@\n     contract.total_supply().call().await;\r\n \r\n \r\n \r\n-    println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n-    // Now that approval is done, call the swap function\r\n-    let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n-    let gas_price = provider.get_gas_price().await?; // Get current gas price\r\n-\r\n-    let swap_tx = contract\r\n-        .method::<_, H256>(\"swap\", (FROM_TOKEN_ADDRESS, TO_TOKEN_ADDRESS, amount, slippage))?  // Adjust the swap method name and args based on your contract's ABI\r\n-        .gas(U256::from(300000))\r\n-        .gas_price(gas_price)\r\n-        .send()\r\n-        .await?;\r\n-\r\n     println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n \r\n     // Wait for transaction receipt\r\n     let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n"
                },
                {
                    "date": 1733155402459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,6 @@\n \r\n \r\n \r\n \r\n-    println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n-\r\n-    // Wait for transaction receipt\r\n-    let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n-    println!(\"Transaction receipt: {:?}\", receipt);\r\n-\r\n     Ok(())\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733155409024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,11 @@\n \r\n \r\n     contract.total_supply().call().await;\r\n \r\n+    if let Ok(total_supply) = contract.total_supply().call().await {\r\n+        println!(\"WETH total supply is {total_supply:?}\");\r\n+    }\r\n \r\n \r\n-\r\n     Ok(())\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733155417910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n-    contract.total_supply().call().await;\r\n \r\n+\r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n         println!(\"WETH total supply is {total_supply:?}\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1733155470057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n \r\n     // Create wallet and client\r\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n+    let address: Address = WETH_ADDRESS.parse()?;\r\n \r\n     // Instantiate the contract at the given address\r\n     let contract = ERC20Token::new(CONTRACT_ADDRESS.parse()?, client);\r\n \r\n@@ -30,9 +31,8 @@\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n \r\n \r\n-\r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n         println!(\"WETH total supply is {total_supply:?}\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1733155475469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,11 @@\n \r\n     // Create wallet and client\r\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n-    let address: Address = WETH_ADDRESS.parse()?;\r\n \r\n+    let address: Address = CONTRACT_ADDRESS.parse()?;\r\n+\r\n     // Instantiate the contract at the given address\r\n     let contract = ERC20Token::new(CONTRACT_ADDRESS.parse()?, client);\r\n \r\n \r\n"
                },
                {
                    "date": 1733155497101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n     let address: Address = CONTRACT_ADDRESS.parse()?;\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(CONTRACT_ADDRESS.parse()?, client);\r\n+    let contract = ERC20Token::new(address, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n"
                },
                {
                    "date": 1733155525496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n+    \r\n \r\n-\r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n         println!(\"WETH total supply is {total_supply:?}\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1733155534118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-    \r\n+    println!(\"{}\",contract.total_supply().call().await )\r\n \r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n         println!(\"WETH total supply is {total_supply:?}\");\r\n     }\r\n"
                },
                {
                    "date": 1733155540869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-    println!(\"{}\",contract.total_supply().call().await )\r\n+    println!(\"{:?}\",contract.total_supply().call().await );\r\n \r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n         println!(\"WETH total supply is {total_supply:?}\");\r\n     }\r\n"
                },
                {
                    "date": 1733155643508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,9 @@\n const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n \r\n // Example token addresses (replace with actual deployed token addresses)\r\n-const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n-const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n+\r\n abigen!(ERC20Token, \"./src/abi/ERC20.json\",);\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n"
                },
                {
                    "date": 1733155651310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n \r\n // Example token addresses (replace with actual deployed token addresses)\r\n-\r\n abigen!(ERC20Token, \"./src/abi/ERC20.json\",);\r\n \r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n@@ -27,9 +26,8 @@\n     let contract = ERC20Token::new(address, client);\r\n \r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n-    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     println!(\"{:?}\",contract.total_supply().call().await );\r\n \r\n     if let Ok(total_supply) = contract.total_supply().call().await {\r\n"
                },
                {
                    "date": 1733155658670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,11 @@\n \r\n     // Instantiate the contract at the given address\r\n     let contract = ERC20Token::new(address, client);\r\n \r\n+    println!(\"{:?}\",contract.total_supply().call().await );\r\n \r\n-    // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n \r\n-    println!(\"{:?}\",contract.total_supply().call().await );\r\n \r\n-    if let Ok(total_supply) = contract.total_supply().call().await {\r\n-        println!(\"WETH total supply is {total_supply:?}\");\r\n-    }\r\n \r\n-\r\n     Ok(())\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733155753746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,52 @@\n-use ethers::{\r\n-    prelude::*,\r\n-    types::{U256, Address, H256},\r\n-};\r\n-use std::{convert::TryFrom, error::Error, sync::Arc};\r\n+use ethers::prelude::*;\r\n+use std::convert::TryFrom;\r\n+use std::sync::Arc;\r\n+use std::env;\r\n+use dotenv::dotenv;\r\n \r\n-const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n-const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n-const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n+abigen!(\r\n+    SwapPool,\r\n+    \"./SwapPool.json\" // Path to the ABI file\r\n+);\r\n \r\n-// Example token addresses (replace with actual deployed token addresses)\r\n-abigen!(ERC20Token, \"./src/abi/ERC20.json\",);\r\n-\r\n #[tokio::main]\r\n-async fn main() -> Result<(), Box<dyn Error>> {\r\n-    // Connect to Ganache\r\n-    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n+async fn main() -> eyre::Result<()> {\r\n+    dotenv().ok(); // Load environment variables from .env file\r\n \r\n-    // Create wallet and client\r\n-    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n-    let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n+    // Set up the provider and wallet\r\n+    let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n\\ No newline at end of file\n+    let wallet: LocalWallet = env::var(\"PRIVATE_KEY\")?.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n-    let address: Address = CONTRACT_ADDRESS.parse()?;\r\n+    // Address of the deployed SwapPool contract\r\n+    let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n+    let swap_pool = SwapPool::new(contract_address, client.clone());\r\n \r\n-    // Instantiate the contract at the given address\r\n-    let contract = ERC20Token::new(address, client);\r\n+    // 1. Deposit ETH\r\n+    let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n+    let tx = swap_pool\r\n+        .deposit()\r\n+        .value(deposit_amount)\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n \r\n-    println!(\"{:?}\",contract.total_supply().call().await );\r\n+    // 2. Swap balances\r\n+    let recipient: Address = \"0xRecipientAddress\".parse()?;\r\n+    let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let tx = swap_pool\r\n+        .swap(recipient, swap_amount)\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n \r\n+    // 3. Withdraw ETH\r\n+    let withdraw_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let tx = swap_pool\r\n+        .withdraw(withdraw_amount)\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n \r\n-\r\n-\r\n     Ok(())\r\n-}\n+}\r\n"
                },
                {
                    "date": 1733155763947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use dotenv::dotenv;\r\n \r\n abigen!(\r\n     SwapPool,\r\n-    \"./SwapPool.json\" // Path to the ABI file\r\n+    \".abi/SwapPool.json\" // Path to the ABI file\r\n );\r\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n@@ -48,5 +48,5 @@\n         .await?;\r\n     println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n \r\n     Ok(())\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1733155782314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use dotenv::dotenv;\r\n \r\n abigen!(\r\n     SwapPool,\r\n-    \".abi/SwapPool.json\" // Path to the ABI file\r\n+    \".src/abi/SwapPool.json\" // Path to the ABI file\r\n );\r\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n"
                },
                {
                    "date": 1733155793766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use dotenv::dotenv;\r\n \r\n abigen!(\r\n     SwapPool,\r\n-    \".src/abi/SwapPool.json\" // Path to the ABI file\r\n+    \"./src/abi/SwapPool.json\" // Path to the ABI file\r\n );\r\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n"
                },
                {
                    "date": 1733155817641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,12 @@\n     let swap_pool = SwapPool::new(contract_address, client.clone());\r\n \r\n     // 1. Deposit ETH\r\n     let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n-    let tx = swap_pool\r\n+    let binding = swap_pool\r\n         .deposit()\r\n-        .value(deposit_amount)\r\n+        .value(deposit_amount);\r\n+    let tx = binding\r\n         .send()\r\n         .await?;\r\n     println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n \r\n"
                },
                {
                    "date": 1733155824669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,11 @@\n \r\n     // 2. Swap balances\r\n     let recipient: Address = \"0xRecipientAddress\".parse()?;\r\n     let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n-    let tx = swap_pool\r\n-        .swap(recipient, swap_amount)\r\n+    let binding = swap_pool\r\n+        .swap(recipient, swap_amount);\r\n+    let tx = binding\r\n         .send()\r\n         .await?;\r\n     println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n \r\n"
                },
                {
                    "date": 1733155830784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,11 @@\n     println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n \r\n     // 3. Withdraw ETH\r\n     let withdraw_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n-    let tx = swap_pool\r\n-        .withdraw(withdraw_amount)\r\n+    let binding = swap_pool\r\n+        .withdraw(withdraw_amount);\r\n+    let tx = binding\r\n         .send()\r\n         .await?;\r\n     println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n \r\n"
                },
                {
                    "date": 1733155862663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     dotenv().ok(); // Load environment variables from .env file\r\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n-    let wallet: LocalWallet = env::var(\"PRIVATE_KEY\")?.parse()?;\r\n+    let wallet: LocalWallet = env::var(\"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\")?.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n     let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n"
                },
                {
                    "date": 1733155869780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     dotenv().ok(); // Load environment variables from .env file\r\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n-    let wallet: LocalWallet = env::var(\"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\")?.parse()?;\r\n+    let wallet: LocalWallet = (\"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\")?.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n     let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n"
                },
                {
                    "date": 1733155875369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+use ethers::prelude::*;\r\n+use std::convert::TryFrom;\r\n+use std::sync::Arc;\r\n+use std::env;\r\n+use dotenv::dotenv;\r\n+\r\n+abigen!(\r\n+    SwapPool,\r\n+    \"./src/abi/SwapPool.json\" // Path to the ABI file\r\n+);\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> eyre::Result<()> {\r\n+    dotenv().ok(); // Load environment variables from .env file\r\n+\r\n+    // Set up the provider and wallet\r\n+    let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n+    let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n+\r\n+    // Address of the deployed SwapPool contract\r\n+    let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n+    let swap_pool = SwapPool::new(contract_address, client.clone());\r\n+\r\n+    // 1. Deposit ETH\r\n+    let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .deposit()\r\n+        .value(deposit_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    // 2. Swap balances\r\n+    let recipient: Address = \"0xRecipientAddress\".parse()?;\r\n+    let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .swap(recipient, swap_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    // 3. Withdraw ETH\r\n+    let withdraw_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .withdraw(withdraw_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    Ok(())\r\n+}\r\n"
                },
                {
                    "date": 1733155893834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n async fn main() -> eyre::Result<()> {\r\n     dotenv().ok(); // Load environment variables from .env file\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n+    let provider = Provider::<Http>::try_from(env::var(\"127.0.0.1:8545\")?)?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n@@ -52,59 +52,4 @@\n     println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n \r\n     Ok(())\r\n }\r\n-use ethers::prelude::*;\r\n-use std::convert::TryFrom;\r\n-use std::sync::Arc;\r\n-use std::env;\r\n-use dotenv::dotenv;\r\n-\r\n-abigen!(\r\n-    SwapPool,\r\n-    \"./src/abi/SwapPool.json\" // Path to the ABI file\r\n-);\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> eyre::Result<()> {\r\n-    dotenv().ok(); // Load environment variables from .env file\r\n-\r\n-    // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(env::var(\"RPC_URL\")?)?;\r\n-    let wallet: LocalWallet = (\"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\")?.parse()?;\r\n-    let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n-\r\n-    // Address of the deployed SwapPool contract\r\n-    let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n-    let swap_pool = SwapPool::new(contract_address, client.clone());\r\n-\r\n-    // 1. Deposit ETH\r\n-    let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n-    let binding = swap_pool\r\n-        .deposit()\r\n-        .value(deposit_amount);\r\n-    let tx = binding\r\n-        .send()\r\n-        .await?;\r\n-    println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n-\r\n-    // 2. Swap balances\r\n-    let recipient: Address = \"0xRecipientAddress\".parse()?;\r\n-    let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n-    let binding = swap_pool\r\n-        .swap(recipient, swap_amount);\r\n-    let tx = binding\r\n-        .send()\r\n-        .await?;\r\n-    println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n-\r\n-    // 3. Withdraw ETH\r\n-    let withdraw_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n-    let binding = swap_pool\r\n-        .withdraw(withdraw_amount);\r\n-    let tx = binding\r\n-        .send()\r\n-        .await?;\r\n-    println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n-\r\n-    Ok(())\r\n-}\r\n"
                },
                {
                    "date": 1733155938335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n-    let contract_address: Address = \"0xYourContractAddress\".parse()?;\r\n+    let contract_address: Address = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\".parse()?;\r\n     let swap_pool = SwapPool::new(contract_address, client.clone());\r\n \r\n     // 1. Deposit ETH\r\n     let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n"
                },
                {
                    "date": 1733155968422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n );\r\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n-    dotenv().ok(); // Load environment variables from .env file\r\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(env::var(\"127.0.0.1:8545\")?)?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n"
                },
                {
                    "date": 1733155974848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use ethers::prelude::*;\r\n use std::convert::TryFrom;\r\n use std::sync::Arc;\r\n use std::env;\r\n-use dotenv::dotenv;\r\n+// use dotenv::dotenv;\r\n \r\n abigen!(\r\n     SwapPool,\r\n     \"./src/abi/SwapPool.json\" // Path to the ABI file\r\n"
                },
                {
                    "date": 1733155995087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(env::var(\"127.0.0.1:8545\")?)?;\r\n+    let provider = Provider::<Http>::try_from(env::var(\"127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156006770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(env::var(\"127.0.0.1:8545\")?;\r\n+    let provider = Provider::<Http>::try_fromnv::var(\"127.0.0.1:8545\"))?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156013173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_fromnv::var(\"127.0.0.1:8545\"))?;\r\n+    let provider = Provider::<Http>::try_from(e\"127.0.0.1:8545\"))?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156019669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(e\"127.0.0.1:8545\"))?;\r\n+    let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156024889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n use ethers::prelude::*;\r\n use std::convert::TryFrom;\r\n use std::sync::Arc;\r\n-use std::env;\r\n-// use dotenv::dotenv;\r\n+// // use dotenv::dotenv;\r\n \r\n abigen!(\r\n     SwapPool,\r\n     \"./src/abi/SwapPool.json\" // Path to the ABI file\r\n"
                },
                {
                    "date": 1733156058036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n"
                },
                {
                    "date": 1733156064581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n+    let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156079306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n-    let provider = Provider::<Http>::try_from(\"127.0.0.1:8545\")?;\r\n+    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156121128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n-    let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794\".parse()?;\r\n+    let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794 \".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n     let contract_address: Address = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\".parse()?;\r\n"
                },
                {
                    "date": 1733156139506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n-    let wallet: LocalWallet = \"0x0a69428ed9206a87C09fF3b0B8FBaa464AAf4794 \".parse()?;\r\n+    let wallet: LocalWallet = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n     let contract_address: Address = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\".parse()?;\r\n"
                },
                {
                    "date": 1733156295272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n+    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?.with_chain_id(1337);\r\n     let wallet: LocalWallet = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\".parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n"
                },
                {
                    "date": 1733156341676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n \r\n     // Set up the provider and wallet\r\n     let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?.with_chain_id(1337);\r\n     let wallet: LocalWallet = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\".parse()?;\r\n+    let chain_id = 1337u64; // Set to your local test network's chain ID (e.g., 1337 for Ganache)\r\n+    let wallet = wallet.with_chain_id(chain_id);\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n \r\n     // Address of the deployed SwapPool contract\r\n     let contract_address: Address = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\".parse()?;\r\n"
                },
                {
                    "date": 1733156347794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n \r\n     // Set up the provider and wallet\r\n-    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?.with_chain_id(1337);\r\n+    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n     let wallet: LocalWallet = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\".parse()?;\r\n     let chain_id = 1337u64; // Set to your local test network's chain ID (e.g., 1337 for Ganache)\r\n     let wallet = wallet.with_chain_id(chain_id);\r\n     let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n"
                },
                {
                    "date": 1733156413502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         .await?;\r\n     println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n \r\n     // 2. Swap balances\r\n-    let recipient: Address = \"0xRecipientAddress\".parse()?;\r\n+    let recipient: Address = \"0x83b0b2Db521f68217D3A4ee04e3492c8D9cA239A \".parse()?;\r\n     let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n     let binding = swap_pool\r\n         .swap(recipient, swap_amount);\r\n     let tx = binding\r\n"
                },
                {
                    "date": 1733405505834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+use ethers::prelude::*;\r\n+use std::convert::TryFrom;\r\n+use std::sync::Arc;\r\n+// // use dotenv::dotenv;\r\n+\r\n+abigen!(\r\n+    SwapPool,\r\n+    \"./src/build/SwapPool.json\" // Path to the ABI file\r\n+);\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> eyre::Result<()> {\r\n+\r\n+    // Set up the provider and wallet\r\n+    let provider = Provider::<Http>::try_from(\"http://127.0.0.1:8545\")?;\r\n+    let wallet: LocalWallet = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\".parse()?;\r\n+    let chain_id = 1337u64; // Set to your local test network's chain ID (e.g., 1337 for Ganache)\r\n+    let wallet = wallet.with_chain_id(chain_id);\r\n+    let client = Arc::new(SignerMiddleware::new(provider, wallet));\r\n+\r\n+    // Address of the deployed SwapPool contract\r\n+    let contract_address: Address = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\".parse()?;\r\n+    let swap_pool = SwapPool::new(contract_address, client.clone());\r\n+\r\n+    // 1. Deposit ETH\r\n+    let deposit_amount = U256::from(1_000_000_000_000_000_000u64); // 1 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .deposit()\r\n+        .value(deposit_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Deposit transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    // 2. Swap balances\r\n+    let recipient: Address = \"0x83b0b2Db521f68217D3A4ee04e3492c8D9cA239A\".parse()?;\r\n+    let swap_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .swap(recipient, swap_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Swap transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    // 3. Withdraw ETH\r\n+    let withdraw_amount = U256::from(500_000_000_000_000_000u64); // 0.5 ETH in Wei\r\n+    let binding = swap_pool\r\n+        .withdraw(withdraw_amount);\r\n+    let tx = binding\r\n+        .send()\r\n+        .await?;\r\n+    println!(\"Withdraw transaction hash: {:?}\", tx.tx_hash());\r\n+\r\n+    Ok(())\r\n+}\r\n"
                }
            ],
            "date": 1733067303549,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    prelude::*,\r\n    types::{U256, Address},\r\n};\r\nuse std::convert::TryFrom;\r\nuse std::error::Error;\r\n\r\nconst INFURA_URL: &str = \"https://127.0.0.1:8545\";  // ใช้ URL ของ Infura หรือ Alchemy\r\nconst ROUTER_CONTRACT_ADDRESS: &str = \"mock\";  // ที่อยู่ของ 1inch Router Contract\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Box<dyn Error>> {\r\n    // ตั้งค่า provider (เชื่อมต่อกับ Ethereum network)\r\n    let provider = Provider::<Http>::try_from(INFURA_URL)?;\r\n\r\n    // สร้าง Wallet จาก Private Key\r\n    let private_key = \"YOUR_PRIVATE_KEY\";  // เปลี่ยนเป็น Private Key ของคุณ\r\n    let wallet: LocalWallet = private_key.parse()?;\r\n    let wallet = wallet.connect(provider.clone());\r\n\r\n    // สร้าง Contract instance ของ 1inch Router\r\n    let router_contract = Contract::from_json(\r\n        provider,\r\n        ROUTER_CONTRACT_ADDRESS.parse()?,\r\n        include_bytes!(\"../abi/1inch_router_abi.json\"), // ABI ของ 1inch Router Contract\r\n    )?;\r\n\r\n    // ตั้งค่า Token ที่ต้องการ swap\r\n    let from_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการแลก\r\n    let to_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการรับ\r\n    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?; // จำนวนที่ต้องการแลก (1 token)\r\n\r\n    // เรียกใช้ฟังก์ชัน swap จาก Router Contract\r\n    let slippage: U256 = U256::from(1); // Slippage (1%)\r\n    let gas_price: U256 = provider.get_gas_price().await?;  // รับ gas price จาก provider\r\n\r\n    let tx = router_contract\r\n        .method::<_, H256>(\r\n            \"swap\",\r\n            (from_token_address, to_token_address, amount, wallet.address(), slippage),\r\n        )?\r\n        .gas(U256::from(300000))  // Gas limit\r\n        .gas_price(gas_price)\r\n        .send()\r\n        .await?;\r\n\r\n    println!(\"Transaction sent: {:?}\", tx);\r\n\r\n    // ตรวจสอบผลลัพธ์หลังจากส่งธุรกรรม\r\n    let receipt = tx.await?.ok_or(\"Transaction failed\")?;\r\n    println!(\"Transaction receipt: {:?}\", receipt);\r\n\r\n    Ok(())\r\n}\r\n"
        }
    ]
}