{
    "sourceFile": "src/test_swap.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1733067303549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733069176139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,67 @@\n use ethers::{\r\n     prelude::*,\r\n-    types::{U256, Address},\r\n+    types::{U256, Address, H256},\r\n };\r\n-use std::convert::TryFrom;\r\n-use std::error::Error;\r\n+use std::{convert::TryFrom, error::Error};\r\n \r\n-const INFURA_URL: &str = \"https://127.0.0.1:8545\";  // ใช้ URL ของ Infura หรือ Alchemy\r\n-const ROUTER_CONTRACT_ADDRESS: &str = \"mock\";  // ที่อยู่ของ 1inch Router Contract\r\n+const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n+const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n \r\n+// Example token addresses (replace with actual deployed token addresses)\r\n+const FROM_TOKEN_ADDRESS: &str = \"0x...\";  // Replace with actual ERC20 token address\r\n+const TO_TOKEN_ADDRESS: &str = \"0x...\";    // Replace with the token you want to receive\r\n+\r\n #[tokio::main]\r\n async fn main() -> Result<(), Box<dyn Error>> {\r\n-    // ตั้งค่า provider (เชื่อมต่อกับ Ethereum network)\r\n-    let provider = Provider::<Http>::try_from(INFURA_URL)?;\r\n+    // Connect to Ganache\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n \r\n-    // สร้าง Wallet จาก Private Key\r\n-    let private_key = \"YOUR_PRIVATE_KEY\";  // เปลี่ยนเป็น Private Key ของคุณ\r\n-    let wallet: LocalWallet = private_key.parse()?;\r\n-    let wallet = wallet.connect(provider.clone());\r\n+    // Create wallet and client\r\n+    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n-    // สร้าง Contract instance ของ 1inch Router\r\n-    let router_contract = Contract::from_json(\r\n-        provider,\r\n-        ROUTER_CONTRACT_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/1inch_router_abi.json\"), // ABI ของ 1inch Router Contract\r\n+    // Instantiate the contract at the given address\r\n+    let contract = Contract::from_json(\r\n+        client.clone(),\r\n+        CONTRACT_ADDRESS.parse()?,  // Contract address\r\n+        include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n \r\n-    // ตั้งค่า Token ที่ต้องการ swap\r\n-    let from_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการแลก\r\n-    let to_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการรับ\r\n-    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?; // จำนวนที่ต้องการแลก (1 token)\r\n+    // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n+    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n-    // เรียกใช้ฟังก์ชัน swap จาก Router Contract\r\n-    let slippage: U256 = U256::from(1); // Slippage (1%)\r\n-    let gas_price: U256 = provider.get_gas_price().await?;  // รับ gas price จาก provider\r\n+    // Approve the contract to spend the `from_token`\r\n+    let token_contract = Contract::from_json(\r\n+        client.clone(),\r\n+        FROM_TOKEN_ADDRESS.parse()?,\r\n+        include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n+    )?;\r\n+    \r\n+    let approve_tx = token_contract\r\n+        .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n+        .gas(U256::from(100000))\r\n+        .send()\r\n+        .await?;\r\n+    \r\n+    println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n-    let tx = router_contract\r\n-        .method::<_, H256>(\r\n-            \"swap\",\r\n-            (from_token_address, to_token_address, amount, wallet.address(), slippage),\r\n-        )?\r\n-        .gas(U256::from(300000))  // Gas limit\r\n+    // Now that approval is done, call the swap function\r\n+    let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n+    let gas_price = provider.get_gas_price().await?; // Get current gas price\r\n+\r\n+    let swap_tx = contract\r\n+        .method::<_, H256>(\"swap\", (FROM_TOKEN_ADDRESS, TO_TOKEN_ADDRESS, amount, slippage))?  // Adjust the swap method name and args based on your contract's ABI\r\n+        .gas(U256::from(300000))\r\n         .gas_price(gas_price)\r\n         .send()\r\n         .await?;\r\n \r\n-    println!(\"Transaction sent: {:?}\", tx);\r\n+    println!(\"Swap transaction sent: {:?}\", swap_tx);\r\n \r\n-    // ตรวจสอบผลลัพธ์หลังจากส่งธุรกรรม\r\n-    let receipt = tx.await?.ok_or(\"Transaction failed\")?;\r\n+    // Wait for transaction receipt\r\n+    let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n     println!(\"Transaction receipt: {:?}\", receipt);\r\n \r\n     Ok(())\r\n }\r\n"
                },
                {
                    "date": 1733069181583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use ethers::{\r\n     prelude::*,\r\n     types::{U256, Address, H256},\r\n };\r\n-use std::{convert::TryFrom, error::Error};\r\n+use std::{convert::TryFrom, error::Error, sync::Arc};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\";  // Ganache RPC URL\r\n const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\"; // Account 0's private key\r\n const CONTRACT_ADDRESS: &str = \"0x2afd9dbb6363f0fdf44b43c28f38ef5e42a556eb\";  // Deployed contract address\r\n"
                },
                {
                    "date": 1733069307354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::from_json(\r\n+    let contract = Contract::fro(\r\n         client.clone(),\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n         include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n"
                },
                {
                    "date": 1733069357149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::fro(\r\n+    let contract = Contract::from(\r\n         client.clone(),\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n         include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n     )?;\r\n@@ -36,15 +36,15 @@\n         client.clone(),\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n         include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n     )?;\r\n-    \r\n+\r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n         .send()\r\n         .await?;\r\n-    \r\n+\r\n     println!(\"Approval transaction sent: {:?}\", approve_tx);\r\n \r\n     // Now that approval is done, call the swap function\r\n     let slippage: U256 = U256::from(1); // Example slippage value (1%)\r\n@@ -63,5 +63,5 @@\n     let receipt = swap_tx.await?.ok_or(\"Transaction failed\")?;\r\n     println!(\"Transaction receipt: {:?}\", receipt);\r\n \r\n     Ok(())\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733069393033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     // Approve the contract to spend the `from_token`\r\n     let token_contract = Contract::from_json(\r\n         client.clone(),\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/ERC20.json\"),  // ERC20 ABI\r\n+        include_bytes!(\"../abi/ERC20.json\")  // ERC20 ABI\r\n     )?;\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n"
                },
                {
                    "date": 1733069423274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,23 +21,23 @@\n     let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n     let client = Arc::new(SignerMiddleware::new(provider.clone(), wallet));\r\n \r\n     // Instantiate the contract at the given address\r\n-    let contract = Contract::from(\r\n-        client.clone(),\r\n+    let contract = Contract::new(\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        include_bytes!(\"../abi/SwapPool.json\"), // ABI of your contract\r\n-    )?;\r\n+        serde_json::from_slice(include_bytes!(\"../abi/SwapPool.json\"))?,  // ABI of your contract\r\n+        client.clone()\r\n+    );\r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n     let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?;  // 1 token\r\n \r\n     // Approve the contract to spend the `from_token`\r\n-    let token_contract = Contract::from_json(\r\n-        client.clone(),\r\n+    let token_contract = Contract::new(\r\n         FROM_TOKEN_ADDRESS.parse()?,\r\n-        include_bytes!(\"../abi/ERC20.json\")  // ERC20 ABI\r\n-    )?;\r\n+        serde_json::from_slice(include_bytes!(\"../abi/ERC20.json\"))?,  // ERC20 ABI\r\n+        client.clone()\r\n+    );\r\n \r\n     let approve_tx = token_contract\r\n         .method::<_, H256>(\"approve\", (CONTRACT_ADDRESS, amount))?  // Approve the swap contract to spend the tokens\r\n         .gas(U256::from(100000))\r\n"
                },
                {
                    "date": 1733069551064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \r\n     // Instantiate the contract at the given address\r\n     let contract = Contract::new(\r\n         CONTRACT_ADDRESS.parse()?,  // Contract address\r\n-        serde_json::from_slice(include_bytes!(\"../abi/SwapPool.json\"))?,  // ABI of your contract\r\n+        serde_json::from_slice(include_bytes!(\"./abi/SwapPool.json\"))?,  // ABI of your contract\r\n         client.clone()\r\n     );\r\n \r\n     // The amount you want to swap (in wei, 1 token = 10^18 wei for ERC20)\r\n"
                }
            ],
            "date": 1733067303549,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    prelude::*,\r\n    types::{U256, Address},\r\n};\r\nuse std::convert::TryFrom;\r\nuse std::error::Error;\r\n\r\nconst INFURA_URL: &str = \"https://127.0.0.1:8545\";  // ใช้ URL ของ Infura หรือ Alchemy\r\nconst ROUTER_CONTRACT_ADDRESS: &str = \"mock\";  // ที่อยู่ของ 1inch Router Contract\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<(), Box<dyn Error>> {\r\n    // ตั้งค่า provider (เชื่อมต่อกับ Ethereum network)\r\n    let provider = Provider::<Http>::try_from(INFURA_URL)?;\r\n\r\n    // สร้าง Wallet จาก Private Key\r\n    let private_key = \"YOUR_PRIVATE_KEY\";  // เปลี่ยนเป็น Private Key ของคุณ\r\n    let wallet: LocalWallet = private_key.parse()?;\r\n    let wallet = wallet.connect(provider.clone());\r\n\r\n    // สร้าง Contract instance ของ 1inch Router\r\n    let router_contract = Contract::from_json(\r\n        provider,\r\n        ROUTER_CONTRACT_ADDRESS.parse()?,\r\n        include_bytes!(\"../abi/1inch_router_abi.json\"), // ABI ของ 1inch Router Contract\r\n    )?;\r\n\r\n    // ตั้งค่า Token ที่ต้องการ swap\r\n    let from_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการแลก\r\n    let to_token_address: Address = \"0x...\".parse()?; // ที่อยู่ของเหรียญที่ต้องการรับ\r\n    let amount: U256 = U256::from_dec_str(\"1000000000000000000\")?; // จำนวนที่ต้องการแลก (1 token)\r\n\r\n    // เรียกใช้ฟังก์ชัน swap จาก Router Contract\r\n    let slippage: U256 = U256::from(1); // Slippage (1%)\r\n    let gas_price: U256 = provider.get_gas_price().await?;  // รับ gas price จาก provider\r\n\r\n    let tx = router_contract\r\n        .method::<_, H256>(\r\n            \"swap\",\r\n            (from_token_address, to_token_address, amount, wallet.address(), slippage),\r\n        )?\r\n        .gas(U256::from(300000))  // Gas limit\r\n        .gas_price(gas_price)\r\n        .send()\r\n        .await?;\r\n\r\n    println!(\"Transaction sent: {:?}\", tx);\r\n\r\n    // ตรวจสอบผลลัพธ์หลังจากส่งธุรกรรม\r\n    let receipt = tx.await?.ok_or(\"Transaction failed\")?;\r\n    println!(\"Transaction receipt: {:?}\", receipt);\r\n\r\n    Ok(())\r\n}\r\n"
        }
    ]
}