{
    "sourceFile": "src/test_deploy.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1733067751946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733068321176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+use abi::Abi;\r\n use ethers::{\r\n     prelude::*,\r\n     types::{Bytes},\r\n };\r\n"
                },
                {
                    "date": 1733068336563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_file(\"./build/SwapPool.abi\");\r\n+    let abi = load_file(\"../build/SwapPool.abi\");\r\n     let bytecode = load_file(\"./build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n"
                },
                {
                    "date": 1733068369046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n };\r\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n-const PRIVATE_KEY: &str = \"your_private_key\";       // Replace with your private key\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n \r\n fn load_file(path: &str) -> String {\r\n     let mut file = File::open(path).expect(\"Unable to open file\");\r\n     let mut content = String::new();\r\n@@ -18,9 +18,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n     let abi = load_file(\"../build/SwapPool.abi\");\r\n-    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n+    let bytecode = load_file(\"../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068437944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_file(\"../build/SwapPool.abi\");\r\n+    let abi = load_file(\"./build/SwapPool.abi\");\r\n     let bytecode = load_file(\"../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n"
                },
                {
                    "date": 1733068443667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_file(\"./build/SwapPool.abi\");\r\n-    let bytecode = load_file(\"../build/SwapPool.bin\");\r\n+    let abi = load_file(\"./../build/SwapPool.abi\");\r\n+    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068518409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_file(\"./../build/SwapPool.abi\");\r\n-    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n+    let abi = load_abi(\"./../build/SwapPool.abi\")?;\r\n+    let bytecode = load_file(\"./../build/SwapPool.bin\")?;\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068524368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_abi(\"./../build/SwapPool.abi\")?;\r\n-    let bytecode = load_file(\"./../build/SwapPool.bin\")?;\r\n+    let abi = load_file(\"./../build/SwapPool.abi\");\r\n+    let bytecode = load_file(\"./../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068591802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    let abi = load_file(\"./../build/SwapPool.abi\");\r\n+    let abi = load_file(\"./../../build/SwapPool.abi\");\r\n     let bytecode = load_file(\"./../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n"
                },
                {
                    "date": 1733068604028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,11 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n+    // focus on tage\r\n     let abi = load_file(\"./../../build/SwapPool.abi\");\r\n-    let bytecode = load_file(\"./../build/SwapPool.bin\");\r\n+    let bytecode = load_file(\"./../../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068699637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n \r\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n-    // focus on tage\r\n-    let abi = load_file(\"./../../build/SwapPool.abi\");\r\n+    // focus on taget floder\r\n+    let abi = load_file(\"./build/SwapPool.abi\");\r\n     let bytecode = load_file(\"./../../build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n"
                },
                {
                    "date": 1733068949363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n     // focus on taget floder\r\n-    let abi = load_file(\"./build/SwapPool.abi\");\r\n-    let bytecode = load_file(\"./../../build/SwapPool.bin\");\r\n+    let abi = load_file(\"./build/SwapPool_sol_SwapPool.abi\");\r\n+    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733068985756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n     // focus on taget floder\r\n     let abi = load_file(\"./build/SwapPool_sol_SwapPool.abi\");\r\n-    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n+    let bytecode = load_file(\"./build/SwapPool_sol_SwapPool.bin\");\r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733069032459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n     // focus on taget floder\r\n-    let abi = load_file(\"./build/SwapPool_sol_SwapPool.abi\");\r\n-    let bytecode = load_file(\"./build/SwapPool_sol_SwapPool.bin\");\r\n+    let abi = load_file(\"./src/build/SwapPool_sol_SwapPool.abi\");\r\n+    let bytecode = load_file(\"./src/build/SwapPool_sol_SwapPool.bin\");\r\n+    \r\n \r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n"
                },
                {
                    "date": 1733238493038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #[tokio::main]\r\n async fn main() -> eyre::Result<()> {\r\n     // Load ABI and Bytecode\r\n     // focus on taget floder\r\n-    let abi = load_file(\"./src/build/SwapPool_sol_SwapPool.abi\");\r\n+    let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/SwapPool_sol_SwapPool.bin\");\r\n     \r\n \r\n     // Connect to Ethereum node\r\n"
                },
                {
                    "date": 1733243402221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+use abi::Abi;\r\n+use ethers::{\r\n+    prelude::*,\r\n+    types::{Bytes},\r\n+};\r\n+use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n+\r\n+const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n+\r\n+fn load_file(path: &str) -> String {\r\n+    let mut file = File::open(path).expect(\"Unable to open file\");\r\n+    let mut content = String::new();\r\n+    file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n+    content\r\n+}\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> eyre::Result<()> {\r\n+    // Load ABI and Bytecode\r\n+    // focus on taget floder\r\n+    let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n+    let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n+    \r\n+\r\n+    // Connect to Ethereum node\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n+    let chain_id = provider.get_chainid().await?;\r\n+    println!(\"Connected to chain ID: {}\", chain_id);\r\n+\r\n+    // Create a wallet\r\n+    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider, wallet.with_chain_id(chain_id.as_u64())));\r\n+\r\n+    // Parse ABI and Bytecode\r\n+    let abi: Abi = serde_json::from_str(&abi)?;\r\n+    let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n+\r\n+    // Deploy the contract\r\n+    println!(\"Deploying contract...\");\r\n+    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n+    let deploy_tx = factory..deploy(())?; // Pass constructor args if needed\r\n+    let contract = deploy_tx.send().await?;\r\n+\r\n+    println!(\"Contract deployed at: {:?}\", contract.address());\r\n+\r\n+    Ok(())\r\n+}\r\n"
                },
                {
                    "date": 1733243412639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,59 +38,11 @@\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n     let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n-    let deploy_tx = factory..deploy(())?; // Pass constructor args if needed\r\n+    let deploy_tx = factory.deploy_tokens(params).deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n \r\n     Ok(())\r\n }\r\n-use abi::Abi;\r\n-use ethers::{\r\n-    prelude::*,\r\n-    types::{Bytes},\r\n-};\r\n-use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n-\r\n-const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n-const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n-\r\n-fn load_file(path: &str) -> String {\r\n-    let mut file = File::open(path).expect(\"Unable to open file\");\r\n-    let mut content = String::new();\r\n-    file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n-    content\r\n-}\r\n-\r\n-#[tokio::main]\r\n-async fn main() -> eyre::Result<()> {\r\n-    // Load ABI and Bytecode\r\n-    // focus on taget floder\r\n-    let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n-    let bytecode = load_file(\"./src/build/SwapPool_sol_SwapPool.bin\");\r\n-    \r\n-\r\n-    // Connect to Ethereum node\r\n-    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n-    let chain_id = provider.get_chainid().await?;\r\n-    println!(\"Connected to chain ID: {}\", chain_id);\r\n-\r\n-    // Create a wallet\r\n-    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n-    let client = Arc::new(SignerMiddleware::new(provider, wallet.with_chain_id(chain_id.as_u64())));\r\n-\r\n-    // Parse ABI and Bytecode\r\n-    let abi: Abi = serde_json::from_str(&abi)?;\r\n-    let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n-\r\n-    // Deploy the contract\r\n-    println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n-    let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n-    let contract = deploy_tx.send().await?;\r\n-\r\n-    println!(\"Contract deployed at: {:?}\", contract.address());\r\n-\r\n-    Ok(())\r\n-}\r\n"
                },
                {
                    "date": 1733243475406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n     let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n-    let deploy_tx = factory.deploy_tokens(params).deploy(())?; // Pass constructor args if needed\r\n+    let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n \r\n"
                },
                {
                    "date": 1733292706901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+use abi::Abi;\r\n+use ethers::{\r\n+    prelude::*,\r\n+    types::{Bytes},\r\n+};\r\n+use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n+\r\n+const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n+const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n+BaseContract\r\n+fn load_file(path: &str) -> String {\r\n+    let mut file = File::open(path).expect(\"Unable to open file\");\r\n+    let mut content = String::new();\r\n+    file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n+    content\r\n+}\r\n+\r\n+#[tokio::main]\r\n+async fn main() -> eyre::Result<()> {\r\n+    // Load ABI and Bytecode\r\n+    // focus on taget floder\r\n+    let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n+    let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n+    \r\n+\r\n+    // Connect to Ethereum node\r\n+    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n+    let chain_id = provider.get_chainid().await?;\r\n+    println!(\"Connected to chain ID: {}\", chain_id);\r\n+\r\n+    // Create a wallet\r\n+    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n+    let client = Arc::new(SignerMiddleware::new(provider, wallet.with_chain_id(chain_id.as_u64())));\r\n+\r\n+    // Parse ABI and Bytecode\r\n+    let abi: Abi = serde_json::from_str(&abi)?;\r\n+    let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n+\r\n+    // Deploy the contract\r\n+    println!(\"Deploying contract...\");\r\n+    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n+    let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n+    let contract = deploy_tx.send().await?;\r\n+\r\n+    println!(\"Contract deployed at: {:?}\", contract.address());\r\n+\r\n+    Ok(())\r\n+}\r\n"
                },
                {
                    "date": 1733292712688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,57 +6,9 @@\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n-BaseContract\r\n-fn load_file(path: &str) -> String {\r\n-    let mut file = File::open(path).expect(\"Unable to open file\");\r\n-    let mut content = String::new();\r\n-    file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n-    content\r\n-}\r\n \r\n-#[tokio::main]\r\n-async fn main() -> eyre::Result<()> {\r\n-    // Load ABI and Bytecode\r\n-    // focus on taget floder\r\n-    let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n-    let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n-    \r\n-\r\n-    // Connect to Ethereum node\r\n-    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n-    let chain_id = provider.get_chainid().await?;\r\n-    println!(\"Connected to chain ID: {}\", chain_id);\r\n-\r\n-    // Create a wallet\r\n-    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n-    let client = Arc::new(SignerMiddleware::new(provider, wallet.with_chain_id(chain_id.as_u64())));\r\n-\r\n-    // Parse ABI and Bytecode\r\n-    let abi: Abi = serde_json::from_str(&abi)?;\r\n-    let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n-\r\n-    // Deploy the contract\r\n-    println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n-    let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n-    let contract = deploy_tx.send().await?;\r\n-\r\n-    println!(\"Contract deployed at: {:?}\", contract.address());\r\n-\r\n-    Ok(())\r\n-}\r\n-use abi::Abi;\r\n-use ethers::{\r\n-    prelude::*,\r\n-    types::{Bytes},\r\n-};\r\n-use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n-\r\n-const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n-const PRIVATE_KEY: &str = \"0x370b655fbd7677d37190504eb3231a976adf2bc6e229b7b8fdf8d2339bf0bd63\";       // Replace with your private key\r\n-\r\n fn load_file(path: &str) -> String {\r\n     let mut file = File::open(path).expect(\"Unable to open file\");\r\n     let mut content = String::new();\r\n     file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n"
                },
                {
                    "date": 1733292721641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n use abi::Abi;\r\n use ethers::{\r\n     prelude::*,\r\n-    types::{Bytes},\r\n+    types::Bytes,\r\n+    BaseContract\r\n };\r\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n"
                },
                {
                    "date": 1733292753134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use abi::Abi;\r\n use ethers::{\r\n     prelude::*,\r\n     types::Bytes,\r\n-    BaseContract\r\n+    contract\r\n };\r\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n"
                },
                {
                    "date": 1733292759272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-\r\n+    contract\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n"
                },
                {
                    "date": 1733292768086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-    contract\r\n+    contract::BaseContract;\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n"
                },
                {
                    "date": 1733292799553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-    contract::BaseContract;\r\n+    let c = BaseContract;\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n"
                },
                {
                    "date": 1733292848855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use abi::Abi;\r\n use ethers::{\r\n     prelude::*,\r\n     types::Bytes,\r\n-    contract\r\n+    contract::BaseContract\r\n };\r\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n"
                },
                {
                    "date": 1733292858658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-    let c = BaseContract;\r\n+    let c = BaseContract.;\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n"
                },
                {
                    "date": 1733292864500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-    let c = BaseContract.;\r\n+    let c = BaseContract;\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n"
                },
                {
                    "date": 1733292890974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n use abi::Abi;\r\n use ethers::{\r\n     prelude::*,\r\n     types::Bytes,\r\n-    contract::BaseContract\r\n };\r\n use std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n \r\n const GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\n"
                },
                {
                    "date": 1733390528857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n     // focus on taget floder\r\n     let abi = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.abi\");\r\n     let bytecode = load_file(\"./src/build/src_sol_SwapPool_sol_SwapPool.bin\");\r\n     \r\n-    let c = BaseContract;\r\n     // Connect to Ethereum node\r\n     let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n     let chain_id = provider.get_chainid().await?;\r\n     println!(\"Connected to chain ID: {}\", chain_id);\r\n@@ -37,9 +36,9 @@\n     let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n+    let factory = ContractFactory::new(abi, bytecode, Arc::new(client.clone());\r\n     let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n"
                },
                {
                    "date": 1733390539123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, Arc::new(client.clone());\r\n+    let factory = ContractFactory::new(abi, bytecode, Arc::clone(client๗);\r\n     let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n"
                },
                {
                    "date": 1733390546835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, Arc::clone(client๗);\r\n+    let factory = ContractFactory::new(abi, bytecode, Arc::clone(client));\r\n     let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n"
                },
                {
                    "date": 1733390554992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n \r\n     // Deploy the contract\r\n     println!(\"Deploying contract...\");\r\n-    let factory = ContractFactory::new(abi, bytecode, Arc::clone(client));\r\n+    let factory = ContractFactory::new(abi, bytecode, Arc::clone(&client));\r\n     let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n     let contract = deploy_tx.send().await?;\r\n \r\n     println!(\"Contract deployed at: {:?}\", contract.address());\r\n"
                }
            ],
            "date": 1733067751946,
            "name": "Commit-0",
            "content": "use ethers::{\r\n    prelude::*,\r\n    types::{Bytes},\r\n};\r\nuse std::{convert::TryFrom, sync::Arc, fs::File, io::Read};\r\n\r\nconst GANACHE_URL: &str = \"http://127.0.0.1:8545\"; // RPC URL (local Ganache)\r\nconst PRIVATE_KEY: &str = \"your_private_key\";       // Replace with your private key\r\n\r\nfn load_file(path: &str) -> String {\r\n    let mut file = File::open(path).expect(\"Unable to open file\");\r\n    let mut content = String::new();\r\n    file.read_to_string(&mut content).expect(\"Unable to read file\");\r\n    content\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() -> eyre::Result<()> {\r\n    // Load ABI and Bytecode\r\n    let abi = load_file(\"./build/SwapPool.abi\");\r\n    let bytecode = load_file(\"./build/SwapPool.bin\");\r\n\r\n    // Connect to Ethereum node\r\n    let provider = Provider::<Http>::try_from(GANACHE_URL)?;\r\n    let chain_id = provider.get_chainid().await?;\r\n    println!(\"Connected to chain ID: {}\", chain_id);\r\n\r\n    // Create a wallet\r\n    let wallet: LocalWallet = PRIVATE_KEY.parse()?;\r\n    let client = Arc::new(SignerMiddleware::new(provider, wallet.with_chain_id(chain_id.as_u64())));\r\n\r\n    // Parse ABI and Bytecode\r\n    let abi: Abi = serde_json::from_str(&abi)?;\r\n    let bytecode = Bytes::from(hex::decode(bytecode.trim())?);\r\n\r\n    // Deploy the contract\r\n    println!(\"Deploying contract...\");\r\n    let factory = ContractFactory::new(abi, bytecode, client.clone());\r\n    let deploy_tx = factory.deploy(())?; // Pass constructor args if needed\r\n    let contract = deploy_tx.send().await?;\r\n\r\n    println!(\"Contract deployed at: {:?}\", contract.address());\r\n\r\n    Ok(())\r\n}\r\n"
        }
    ]
}