{
    "sourceFile": "pool.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733189930229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733189942657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+// SPDX-License-Identifier: MIT\r\n+pragma solidity ^0.8.0;\r\n+\r\n+interface IERC20 {\r\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n+    function transfer(address recipient, uint256 amount) external returns (bool);\r\n+    function balanceOf(address account) external view returns (uint256);\r\n+}\r\n+\r\n+contract EthMecoinPool {\r\n+    IERC20 public mecoin;\r\n+    uint256 public totalEth;\r\n+    uint256 public totalMecoin;\r\n+\r\n+    mapping(address => uint256) public ethBalances;\r\n+    mapping(address => uint256) public mecoinBalances;\r\n+\r\n+    event LiquidityAdded(address indexed provider, uint256 ethAmount, uint256 mecoinAmount);\r\n+    event LiquidityRemoved(address indexed provider, uint256 ethAmount, uint256 mecoinAmount);\r\n+    event Swapped(address indexed trader, uint256 ethIn, uint256 mecoinOut);\r\n+\r\n+    constructor(address _mecoin) {\r\n+        mecoin = IERC20(_mecoin);\r\n+    }\r\n+\r\n+    // Add liquidity to the ETH/mecoin pool\r\n+    function addLiquidity(uint256 mecoinAmount) external payable {\r\n+        require(msg.value > 0, \"ETH amount must be greater than 0\");\r\n+        require(mecoinAmount > 0, \"mecoin amount must be greater than 0\");\r\n+\r\n+        mecoin.transferFrom(msg.sender, address(this), mecoinAmount);\r\n+\r\n+        ethBalances[msg.sender] += msg.value;\r\n+        mecoinBalances[msg.sender] += mecoinAmount;\r\n+\r\n+        totalEth += msg.value;\r\n+        totalMecoin += mecoinAmount;\r\n+\r\n+        emit LiquidityAdded(msg.sender, msg.value, mecoinAmount);\r\n+    }\r\n+\r\n+    // Remove liquidity from the pool\r\n+    function removeLiquidity(uint256 ethAmount) external {\r\n+        require(ethBalances[msg.sender] >= ethAmount, \"Insufficient ETH balance\");\r\n+\r\n+        uint256 mecoinAmount = (ethAmount * totalMecoin) / totalEth;\r\n+\r\n+        require(mecoinBalances[msg.sender] >= mecoinAmount, \"Insufficient mecoin balance\");\r\n+\r\n+        ethBalances[msg.sender] -= ethAmount;\r\n+        mecoinBalances[msg.sender] -= mecoinAmount;\r\n+\r\n+        totalEth -= ethAmount;\r\n+        totalMecoin -= mecoinAmount;\r\n+\r\n+        payable(msg.sender).transfer(ethAmount);\r\n+        mecoin.transfer(msg.sender, mecoinAmount);\r\n+\r\n+        emit LiquidityRemoved(msg.sender, ethAmount, mecoinAmount);\r\n+    }\r\n+\r\n+    // Swap ETH for mecoin\r\n+    function swapEthForMecoin() external payable {\r\n+        require(msg.value > 0, \"ETH amount must be greater than 0\");\r\n+\r\n+        uint256 mecoinAmount = (msg.value * totalMecoin) / totalEth;\r\n+        require(mecoinAmount > 0 && mecoinAmount <= totalMecoin, \"Insufficient pool balance\");\r\n+\r\n+        totalEth += msg.value;\r\n+        totalMecoin -= mecoinAmount;\r\n+\r\n+        mecoin.transfer(msg.sender, mecoinAmount);\r\n+\r\n+        emit Swapped(msg.sender, msg.value, mecoinAmount);\r\n+    }\r\n+}\r\n+\r\n+/**/\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733189930229,
            "name": "Commit-0",
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract EthMecoinPool {\r\n    IERC20 public mecoin;\r\n    uint256 public totalEth;\r\n    uint256 public totalMecoin;\r\n\r\n    mapping(address => uint256) public ethBalances;\r\n    mapping(address => uint256) public mecoinBalances;\r\n\r\n    event LiquidityAdded(address indexed provider, uint256 ethAmount, uint256 mecoinAmount);\r\n    event LiquidityRemoved(address indexed provider, uint256 ethAmount, uint256 mecoinAmount);\r\n    event Swapped(address indexed trader, uint256 ethIn, uint256 mecoinOut);\r\n\r\n    constructor(address _mecoin) {\r\n        mecoin = IERC20(_mecoin);\r\n    }\r\n\r\n    // Add liquidity to the ETH/mecoin pool\r\n    function addLiquidity(uint256 mecoinAmount) external payable {\r\n        require(msg.value > 0, \"ETH amount must be greater than 0\");\r\n        require(mecoinAmount > 0, \"mecoin amount must be greater than 0\");\r\n\r\n        mecoin.transferFrom(msg.sender, address(this), mecoinAmount);\r\n\r\n        ethBalances[msg.sender] += msg.value;\r\n        mecoinBalances[msg.sender] += mecoinAmount;\r\n\r\n        totalEth += msg.value;\r\n        totalMecoin += mecoinAmount;\r\n\r\n        emit LiquidityAdded(msg.sender, msg.value, mecoinAmount);\r\n    }\r\n\r\n    // Remove liquidity from the pool\r\n    function removeLiquidity(uint256 ethAmount) external {\r\n        require(ethBalances[msg.sender] >= ethAmount, \"Insufficient ETH balance\");\r\n\r\n        uint256 mecoinAmount = (ethAmount * totalMecoin) / totalEth;\r\n\r\n        require(mecoinBalances[msg.sender] >= mecoinAmount, \"Insufficient mecoin balance\");\r\n\r\n        ethBalances[msg.sender] -= ethAmount;\r\n        mecoinBalances[msg.sender] -= mecoinAmount;\r\n\r\n        totalEth -= ethAmount;\r\n        totalMecoin -= mecoinAmount;\r\n\r\n        payable(msg.sender).transfer(ethAmount);\r\n        mecoin.transfer(msg.sender, mecoinAmount);\r\n\r\n        emit LiquidityRemoved(msg.sender, ethAmount, mecoinAmount);\r\n    }\r\n\r\n    // Swap ETH for mecoin\r\n    function swapEthForMecoin() external payable {\r\n        require(msg.value > 0, \"ETH amount must be greater than 0\");\r\n\r\n        uint256 mecoinAmount = (msg.value * totalMecoin) / totalEth;\r\n        require(mecoinAmount > 0 && mecoinAmount <= totalMecoin, \"Insufficient pool balance\");\r\n\r\n        totalEth += msg.value;\r\n        totalMecoin -= mecoinAmount;\r\n\r\n        mecoin.transfer(msg.sender, mecoinAmount);\r\n\r\n        emit Swapped(msg.sender, msg.value, mecoinAmount);\r\n    }\r\n}\r\n"
        }
    ]
}